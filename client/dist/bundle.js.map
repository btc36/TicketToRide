{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/Models/GameList.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/ViewModels/LoginRegisterViewModel.ts","webpack:///./src/Views/LoginRegisterView.tsx","webpack:///./src/ViewModels/ILoginRegisterViewModel.ts","webpack:///./src/ViewModels/GameListViewModel.ts","webpack:///./src/Views/GameListView.tsx","webpack:///./src/ViewModels/IGameListViewModel.ts","webpack:///./src/ViewModels/GameLobbyViewModel.ts","webpack:///./src/Views/GameLobbyView.tsx","webpack:///./src/ViewModels/IGameLobbyViewModel.ts","webpack:///./src/Server/ClientCommunicator.ts","webpack:///./src/Server/Serializer.ts","webpack:///./src/Services/ExternalClientFacade.ts","webpack:///./src/Models/ClientRoot.ts","webpack:///./src/Models/Session.ts","webpack:///./src/Services/InternalClientFacade.ts","webpack:///./src/Server/ServerProxy.ts","webpack:///./src/Server/ClientCommandObjects.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GameList","this","games","Array","addGame","game","push","removeGame","gameId","length","getGameID","splice","replaceGameList","newGameList","getGames","ReactDOM","LoginRegisterViewModel_1","GameListViewModel_1","GameLobbyViewModel_1","ClientCommunicator_1","Serializer_1","ExternalClientFacade_1","ClientRoot_1","InternalClientFacade_1","ServerProxy_1","initialState","page","MainComponent","_super","props","_this","state","__extends","render","createElement","LoginRegisterViewModel","main","services","GameListViewModel","GameLobbyViewModel","Component","root","ClientRoot","externalClientFacade","ExternalClientFacade","serializer","Serializer","clientCommunicator","ClientCommunicator","serverProxy","ServerProxy","internalClientFacade","InternalClientFacade","document","getElementById","LoginRegisterView_1","ILoginRegisterViewModel_1","apply","arguments","update","updateType","data","setState","onLoginButtonPressed","e","preventDefault","login","loginUserName","loginPassword","onRegisterButtonPressed","register","onLoginUserNameChange","target","onLoginPasswordChange","onRegisterUserNameChange","registerUserName","onRegisterPasswordChange","registerPassword","onRegisterConfirmPasswordChange","registerConfirmPassword","LoginRegisterView","component","className","onSubmit","type","onChange","errorMessage","GameListView_1","IGameListViewModel_1","gameList","createGameButtonPressed","createGame","createGameNumPlayers","createGameName","joinGameButtonPressed","gameName","String","selectedGame","id","joinGame","tableRowPressed","index","onCreateGameNameChange","onCreateGameNumPlayersChange","isJoinGameButtonDisabled","getGameList","GameListView","rows","onClick","getGameName","getMaxPlayers","getNumPlayers","maxPlayer","disabled","initialGameList","GameLobbyView_1","IGameLobbyViewModel_1","startGameButtonPressed","alert","GameLobbyView","players","playerList","serverUrlIn","serverPortIn","serialIn","facadeIn","serverUrl","serverPort","clientFacade","sendCommand","command","toJSON","request","XMLHttpRequest","open","setRequestHeader","that","serial","onload","status","result","parseJSON","responseText","executeCommands","onerror","send","commands","methodName","loginResults","paramValues","registerResults","updateGameList","parseJSONGames","startGame","JSON","stringify","parse","wasSuccessful","transitionPage","pageName","GameList_1","Session_1","myPlayer","lobby","session","Session","observers","attach","detach","notify","_i","_a","setCurrentPage","setCurrentGame","getCurrentUser","getUsername","setLoggedInUser","currentPage","loggedInUser","player","proxy","username","password","numPlayers","me","ClientCommandObjects_1","commIn","communicator","confirm","ClientCommandObjects","classNameIn","methodNameIn","paramTypesIn","paramValuesIn","paramTypes"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = React;","import { LobbyGame } from \"./LobbyGame\"\r\n\r\nexport class GameList {\r\n    games: Array<LobbyGame>;\r\n\r\n    [key: string]: any;\r\n\r\n    constructor() {\r\n        this.games = new Array<LobbyGame>();\r\n    }\r\n\r\n    addGame(game: LobbyGame): void {\r\n        this.games.push(game);\r\n    }\r\n\r\n    removeGame(gameId: string): void {\r\n        for (var i = this.games.length - 1; i >= 0; --i) {\r\n            if (this.games[i].getGameID() == gameId) {\r\n                this.games.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    replaceGameList(newGameList: Array<LobbyGame>): void {\r\n        this.games = newGameList;\r\n    }\r\n\r\n    getGames(): Array<LobbyGame> {\r\n        return this.games;\r\n    }\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { LoginRegisterViewModel } from './ViewModels/LoginRegisterViewModel';\r\nimport { GameListViewModel } from './ViewModels/GameListViewModel';\r\nimport { GameLobbyViewModel } from './ViewModels/GameLobbyViewModel';\r\n\r\nimport { ClientCommunicator } from './Server/ClientCommunicator';\r\nimport { Serializer } from './Server/Serializer';\r\nimport { ExternalClientFacade } from './Services/ExternalClientFacade';\r\nimport { ClientRoot } from './Models/ClientRoot';\r\nimport { InternalClientFacade } from './Services/InternalClientFacade';\r\nimport { ServerProxy } from './Server/ServerProxy';\r\n\r\nexport const initialState = {\r\n  \"page\": \"loginRegister\"\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nclass MainComponent extends React.Component<any, any> {\r\n  state: State;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    if (this.state.page == \"loginRegister\") {\r\n      return <LoginRegisterViewModel main={this} services={this.props.services} />;\r\n    } else if (this.state.page == \"gameList\") {\r\n      return <GameListViewModel main={this} services={this.props.services} />;\r\n    } else if (this.state.page == \"gameLobby\") {\r\n      return <GameLobbyViewModel main={this} services={this.props.services} />;\r\n    }\r\n  }\r\n}\r\n\r\nconst root = new ClientRoot();\r\nconst externalClientFacade = new ExternalClientFacade(root);\r\nconst serializer = new Serializer();\r\nconst clientCommunicator = new ClientCommunicator(\"localhost\", \"8080\", serializer, externalClientFacade);\r\nconst serverProxy = new ServerProxy(clientCommunicator);\r\nconst internalClientFacade = new InternalClientFacade(serverProxy, root);\r\n\r\nReactDOM.render(\r\n    <MainComponent services={internalClientFacade}/>,\r\n    document.getElementById(\"example\")\r\n);\r\n","module.exports = ReactDOM;","import * as React from \"react\";\r\nimport { LoginRegisterView } from \"../Views/LoginRegisterView\";\r\nimport { initialState, State, ILoginRegisterViewModel } from \"./ILoginRegisterViewModel\";\r\nimport { IObserver } from \"./IObserver\";\r\nimport { ViewModelProps } from \"./ViewModelProps\";\r\n\r\nexport class LoginRegisterViewModel extends React.Component<ViewModelProps, State> implements ILoginRegisterViewModel, IObserver {\r\n\r\n  state: State = initialState;\r\n\r\n  update = (updateType: string, data: any) => {\r\n    if (updateType == \"transitionPage\") {\r\n      this.props.main.setState({\"page\": data});      \r\n    }\r\n  }\r\n\r\n  onLoginButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.services.login(this.state.loginUserName, this.state.loginPassword);\r\n  }\r\n\r\n  onRegisterButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.services.register(this.state.loginUserName, this.state.loginPassword);\r\n  }\r\n\r\n  onLoginUserNameChange = (e: any) => {\r\n    this.setState({\"loginUserName\": e.target.value});\r\n  }\r\n\r\n  onLoginPasswordChange = (e: any) => {\r\n    this.setState({\"loginPassword\": e.target.value});\r\n  }\r\n\r\n  onRegisterUserNameChange = (e: any) => {\r\n    this.setState({\"registerUserName\": e.target.value});\r\n  }\r\n\r\n  onRegisterPasswordChange = (e: any) => {\r\n    this.setState({\"registerPassword\": e.target.value});\r\n  }\r\n\r\n  onRegisterConfirmPasswordChange = (e: any) => {\r\n    this.setState({\"registerConfirmPassword\": e.target.value});\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return LoginRegisterView(this);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as I from \"../ViewModels/ILoginRegisterViewModel\";\r\n\r\nexport const LoginRegisterView = (component: I.ILoginRegisterViewModel) => {\r\n    return (\r\n      <div className=\"view\">\r\n        <div className=\"half-partition\">\r\n          <h1>Login</h1>\r\n          <form onSubmit={component.onLoginButtonPressed}>\r\n            <p>\r\n              <label>User Name:<br />\r\n                <input type=\"text\" name=\"login-username\" value={component.state.loginUserName} onChange={component.onLoginUserNameChange} />\r\n              </label> \r\n            </p>\r\n            <p>\r\n              <label>Password:<br />\r\n                <input type=\"text\" name=\"login-password\" value={component.state.loginPassword} onChange={component.onLoginPasswordChange}/>\r\n              </label>\r\n            </p>\r\n            <p><input type=\"submit\" value=\"Log in\" /></p>\r\n          </form>\r\n        </div>\r\n        <div className=\"half-partition\">\r\n          <h1>Register</h1>\r\n          <form onSubmit={component.onRegisterButtonPressed}>\r\n            <p>\r\n              <label>User Name:<br />\r\n                <input type=\"text\" name=\"register-username\" value={component.state.registerUserName} onChange={component.onRegisterUserNameChange}/>\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <label>Password:<br />\r\n                <input type=\"text\" name=\"register-password\" value={component.state.registerPassword} onChange={component.onRegisterPasswordChange}/>\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <label>Confirm password:<br />\r\n                <input type=\"text\" name=\"register-confirm-password\" value={component.state.registerConfirmPassword} onChange={component.onRegisterConfirmPasswordChange}/>\r\n              </label>\r\n            </p>\r\n            <input type=\"submit\" value=\"Register\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","export const initialState = {\r\n  loginUserName: \"\",\r\n  loginPassword: \"\",\r\n  registerUserName: \"\",\r\n  registerPassword: \"\",\r\n  registerConfirmPassword: \"\",\r\n  errorMessage: \"\"\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nexport interface ILoginRegisterViewModel {\r\n  state: State;\r\n  onLoginButtonPressed(e: any): void;\r\n  onRegisterButtonPressed(e: any): void;\r\n  onLoginUserNameChange(e: any): void;\r\n  onLoginPasswordChange(e: any): void;\r\n  onRegisterUserNameChange(e: any): void;\r\n  onRegisterPasswordChange(e: any): void;\r\n  onRegisterConfirmPasswordChange(e: any): void;\r\n}\r\n","import * as React from \"react\";\r\nimport { GameListView } from \"../Views/GameListView\";\r\nimport { initialState, State, IGameListViewModel } from \"./IGameListViewModel\";\r\nimport { IObserver } from \"./IObserver\";\r\nimport { ViewModelProps } from \"./ViewModelProps\";\r\n\r\nexport class GameListViewModel extends React.Component<ViewModelProps, State> implements IGameListViewModel, IObserver {\r\n\r\n  state: State;\r\n\r\n  constructor(props: ViewModelProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.props.services.getGameList();\r\n  }\r\n\r\n  update = (updateType: string, data: any) => {\r\n    if (updateType == \"transitionPage\") {\r\n      this.props.main.setState({\"page\": data});      \r\n    } else if (updateType == \"updateGameList\") {\r\n      this.setState({\"gameList\": data});\r\n    }\r\n  }\r\n\r\n  createGameButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.services.createGame(this.state.createGameNumPlayers, this.state.createGameName);\r\n  }\r\n\r\n  joinGameButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    const gameName: string = String(this.state.gameList[this.state.selectedGame].name);\r\n    const gameId: string = String(this.state.gameList[this.state.selectedGame].id);\r\n    this.props.services.joinGame(gameName, gameId);\r\n  }\r\n\r\n  tableRowPressed = (index: number) => {\r\n    this.setState({selectedGame: index});\r\n  }\r\n\r\n  onCreateGameNameChange = (e: any) => {\r\n    this.setState({createGameName: e.target.value});\r\n  }\r\n\r\n  onCreateGameNumPlayersChange = (e: any) => {\r\n    this.setState({createGameNumPlayers: e.target.value});\r\n  }\r\n\r\n\r\n  isJoinGameButtonDisabled = () => {\r\n    return this.state.selectedGame != -1;\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return GameListView(this);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as I from \"../ViewModels/IGameListViewModel\";\r\n\r\nexport const GameListView = (component: I.IGameListViewModel) => {\r\n  const rows = [];\r\n  const gameList = component.state.gameList.getGames();\r\n  for (let i = 0; i < gameList.length; i++) {\r\n    rows.push(\r\n      <tr onClick={() => component.tableRowPressed(i)} className={component.state.selectedGame == i ? \"active\" : \"\"} key={i}>\r\n        <td>{gameList[i].getGameID()}</td>\r\n        <td>{gameList[i].getGameName()}</td>\r\n        <td>{gameList[i].getMaxPlayers()}</td>\r\n        <td>{gameList[i].getNumPlayers()}/{gameList[i].maxPlayer}</td>\r\n      </tr>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"view\">\r\n      <div className=\"half-partition\">\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Name</th>\r\n              <th>Players</th>\r\n              <th>In-Game</th>\r\n            </tr>\r\n            {rows}\r\n          </tbody>\r\n        </table>\r\n        <p>\r\n          <button onClick={component.joinGameButtonPressed} disabled={component.state.selectedGame == -1}>Join Game</button>\r\n        </p>\r\n      </div>\r\n      <div className=\"half-partition\">\r\n        <form onSubmit={component.createGameButtonPressed}>\r\n          <p>\r\n            <label>Name:<br />\r\n              <input type=\"text\" value={component.state.createGameName} onChange={component.onCreateGameNameChange}/>\r\n            </label>\r\n          </p>\r\n          <p>\r\n            <label>Number of players:<br />\r\n              <input type=\"text\" value={component.state.createGameNumPlayers} onChange={component.onCreateGameNumPlayersChange}/>\r\n            </label>\r\n          </p>\r\n          <input type=\"submit\" value=\"Create Game\" className=\"wide-button\" />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { GameList } from \"../Models/GameList\";\r\n\r\nconst initialGameList: GameList = new GameList();\r\n\r\nexport const initialState = {\r\n  gameList: initialGameList,\r\n  selectedGame: -1,\r\n  createGameName: \"\",\r\n  createGameNumPlayers: 0\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nexport interface IGameListViewModel {\r\n  state: State;\r\n  createGameButtonPressed(e: any): void;\r\n  joinGameButtonPressed(e: any): void;\r\n  tableRowPressed(index: number): void;\r\n  onCreateGameNameChange(e: any): void;\r\n  onCreateGameNumPlayersChange(e: any): void;\r\n  isJoinGameButtonDisabled(): boolean;\r\n}\r\n","import * as React from \"react\";\r\nimport { GameLobbyView } from \"../Views/GameLobbyView\";\r\nimport { initialState, State, IGameLobbyViewModel } from \"./IGameLobbyViewModel\";\r\nimport { IObserver } from \"./IObserver\";\r\nimport { ViewModelProps } from \"./ViewModelProps\";\r\n\r\nexport class GameLobbyViewModel extends React.Component<ViewModelProps, State> implements IGameLobbyViewModel, IObserver {\r\n\r\n  state: State = initialState;\r\n\r\n  update = (updateType: string, data: any) => {\r\n    if (updateType == \"transitionPage\") {\r\n      this.props.main.setState({\"page\": data});      \r\n    }\r\n  }\r\n\r\n  startGameButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    alert(\"starting game...\");\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return GameLobbyView(this);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as I from \"../ViewModels/IGameLobbyViewModel\";\r\n\r\nexport const GameLobbyView  = (component: I.IGameLobbyViewModel) => {\r\n  const players = [];\r\n  const playerList = component.state.playerList;\r\n  for (let i = 0; i < playerList.length; i++) {\r\n    players.push(\r\n      <li>{playerList[i]}</li>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"view\">\r\n      <div className=\"half-partition\">\r\n        <p><b><u>Players</u></b></p>\r\n        <ul>\r\n          {players}\r\n        </ul>\r\n        <p><button onClick={component.startGameButtonPressed} disabled={playerList.length < 2}>Start Game</button></p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","const initialPlayerList: string[] = [];\r\n\r\nexport const initialState = {\r\n  playerList: initialPlayerList\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nexport interface IGameLobbyViewModel {\r\n  state: State;\r\n  startGameButtonPressed(e: any): void;\r\n}\r\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\r\nimport { Serializer } from \"./Serializer\";\r\nimport { ExternalClientFacade } from \"../Services/ExternalClientFacade\";\r\n\r\nexport class ClientCommunicator {\r\n    serverUrl: string;\r\n    serverPort: string;\r\n    serializer: Serializer;\r\n    clientFacade: ExternalClientFacade;\r\n\r\n    constructor(public serverUrlIn: string, public serverPortIn: string, public serialIn: Serializer, public facadeIn: ExternalClientFacade) {\r\n        this.serverUrl = serverUrlIn;\r\n        this.serverPort = serverPortIn;\r\n        this.serializer = serialIn;\r\n        this.clientFacade = facadeIn;\r\n    }\r\n    public sendCommand(command: ClientCommandObjects){\r\n        var data = this.serializer.toJSON(command);\r\n        var request = new XMLHttpRequest();\r\n        request.open('POST', this.serverPort + this.serverUrl, true);\r\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\r\n        let that = this;\r\n        let serial = this.serializer;\r\n        request.onload = function() {\r\n            if (request.status >= 200 && request.status < 400) {\r\n              // Success!\r\n              var result = serial.parseJSON(request.responseText);\r\n              that.executeCommands([result]);\r\n            } else {\r\n              // We reached our target server, but it returned an error\r\n          \r\n            }\r\n          };\r\n          \r\n          request.onerror = function() {\r\n            // There was a connection error of some sort\r\n          };\r\n        request.send(data);\r\n    }\r\n\r\n    public executeCommands(commands: ClientCommandObjects[]){\r\n      for (var i = 0; i < commands.length; i++){\r\n        if (commands[i].methodName == \"loginStatus\"){\r\n          this.clientFacade.loginResults(commands[i].paramValues[0], commands[i].paramValues[1]);\r\n        }\r\n        else if (commands[i].methodName == \"registerStatus\"){\r\n          this.clientFacade.registerResults(commands[i].paramValues[0], commands[i].paramValues[1]);\r\n        }\r\n        else if (commands[i].methodName == \"createGame\"){\r\n          this.clientFacade.updateGameList(this.serializer.parseJSONGames(commands[i].paramValues[2]));\r\n        }\r\n        else if (commands[i].methodName == \"joinGame\"){\r\n          this.clientFacade.joinGame(commands[i].paramValues[2]);\r\n        }\r\n        else if (commands[i].methodName == \"startGame\"){\r\n          this.clientFacade.startGame(commands[i].paramValues[2]);\r\n        }\r\n      }\r\n    }\r\n}\r\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\r\nimport { GameList } from \"../Models/GameList\";\r\n\r\nexport class Serializer {\r\n    constructor() {\r\n    }\r\n    public toJSON(command: ClientCommandObjects){\r\n        var myCommand = JSON.stringify(command);\r\n        return myCommand;\r\n    }\r\n    public parseJSON(command: string){\r\n        var myCommand: ClientCommandObjects = JSON.parse(command);\r\n        return myCommand;\r\n    }\r\n    public parseJSONGames(games: string){\r\n        var gameList: GameList = JSON.parse(games);\r\n        return gameList;\r\n    }\r\n}","import { ClientRoot } from \"../Models/ClientRoot\";\r\nimport { LobbyGame } from \"../Models/LobbyGame\";\r\nimport { GameList } from \"../Models/GameList\";\r\n\r\nexport class ExternalClientFacade {\r\n    root: ClientRoot;\r\n\r\n    constructor(root: ClientRoot) {\r\n        this.root = root;\r\n    }\r\n    loginResults(wasSuccessful: boolean, errorMessage: string) {\r\n        this.root.loginResults(wasSuccessful, errorMessage);\r\n    }\r\n\r\n    registerResults(wasSuccessful: boolean, errorMessage: string) {\r\n        this.root.registerResults(wasSuccessful, errorMessage);\r\n    }\r\n\r\n    updateGameList(games: GameList) {\r\n        this.root.updateGameList(games);\r\n    }\r\n\r\n    transitionPage(pageName: string) {\r\n        this.root.transitionPage(pageName);\r\n    }\r\n\r\n    getGameList(): Array<LobbyGame> {\r\n        let gameList = this.root.getGameList();\r\n        return gameList;\r\n    }\r\n\r\n    joinGame(gameId: string) {\r\n        this.root.joinGame(gameId);\r\n    }\r\n\r\n    startGame(gameId:string){\r\n    \tthis.root.startGame(gameId);\r\n    }\r\n\r\n}\r\n","import { GameList } from \"./GameList\"\r\nimport { Player } from \"./Player\"\r\nimport { LobbyGame } from \"./LobbyGame\"\r\nimport { Session } from \"./Session\"\r\nimport { IObserver } from \"../ViewModels/IObserver\"\r\nimport { ISubject } from \"./ISubject\"\r\n\r\n\r\nexport class ClientRoot implements ISubject {\r\n    gameList: GameList;\r\n    myPlayer: Player;\r\n    lobby: LobbyGame;\r\n    session: Session;\r\n    observers: Array<IObserver>;\r\n    //What is this constructor, and all the other classes. Does the client start out empty?\r\n    constructor() {\r\n        this.gameList = new GameList();\r\n        this.myPlayer = null;\r\n        this.lobby = null;\r\n        this.session = new Session();\r\n        this.observers = new Array<IObserver>();\r\n    }\r\n    //add an observer \r\n    attach(o: IObserver) {\r\n        this.observers.push(o); \r\n    }\r\n    //remove an observer\r\n    detach(o: IObserver) {\r\n\r\n    }\r\n\r\n    notify(updateType: string, data: any) {\r\n        for (var o of this.observers) {\r\n            o.update(updateType, data);\r\n        }\r\n    }\r\n    transitionPage(pageName: string) {\r\n        this.session.setCurrentPage(pageName);\r\n        this.notify(\"transitionPage\", pageName);\r\n    }\r\n\r\n\r\n    getGameList(): Array<LobbyGame> {\r\n        let games = this.gameList.getGames();\r\n        return games;\r\n    }\r\n\r\n    joinGame(gameId: string) {\r\n        this.myPlayer.setCurrentGame(gameId)\r\n        this.transitionPage(\"lobbyGame\");\r\n    }\r\n \r\n    getCurrentUser(){\r\n    \treturn this.myPlayer.getUsername();\r\n    }\r\n\r\n    updateGameList(gameList: GameList) {\r\n        this.gameList.replaceGameList(gameList.getGames());\r\n        this.notify(\"updateGameList\", this.gameList);\r\n    }\r\n\r\n    startGame(gameId:string){\r\n    \tthis.notify(\"startGame\",gameId);\r\n    }\r\n    /*\r\n     * loginRegister\r\n     * gameList\r\n     * gameLobby\r\n     */\r\n    loginResults(wasSuccessful: boolean, errorMessage: string) {\r\n        if (wasSuccessful) {\r\n            this.session.setLoggedInUser(this.myPlayer);\r\n            this.transitionPage(\"gameList\");\r\n        } else {\r\n            this.notify(\"error\", errorMessage);\r\n        }\r\n    }\r\n\r\n    registerResults(wasSuccessful: boolean, errorMessage: string) {\r\n        if (wasSuccessful) {\r\n            this.session.setLoggedInUser(this.myPlayer);\r\n            this.transitionPage(\"gameList\");\r\n        } else {\r\n            this.notify(\"error\", errorMessage);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import {Player} from \"./Player\"\r\n\r\nexport class Session {\r\n   // authToken: string;\r\n    currentPage: string;\r\n    loggedInUser: Player;\r\n    \r\n    constructor() {\r\n        //this.authToken = auth;\r\n       this.currentPage = \"Login\";\r\n       this.loggedInUser = null;\r\n    }\r\n\r\n   /* get getAuth(): string {\r\n        return this.authToken;\r\n    }\r\n\r\n    set setAuth(auth: string) {\r\n        this.authToken = auth;\r\n    }\r\n    */\r\n    get getCurrentPage(): string {\r\n        return this.currentPage;\r\n    }\r\n\r\n    setCurrentPage(page: string) {\r\n        this.currentPage = page;\r\n    }\r\n\r\n    get getLoggedInUser(): Player {\r\n        return this.loggedInUser;\r\n    }\r\n\r\n    setLoggedInUser(player: Player) {\r\n        this.loggedInUser = player;\r\n    }\r\n\r\n}\r\n","import { ServerProxy } from \"../Server/ServerProxy\";\r\nimport { ClientRoot } from \"../Models/ClientRoot\";\r\n\r\nexport class InternalClientFacade {\r\n    proxy: ServerProxy;\r\n    root: ClientRoot;\r\n\r\n    constructor(proxy:ServerProxy,root:ClientRoot) {\r\n        this.proxy = proxy;\r\n        this.root = root;\r\n    }\r\n\r\n    login(username: string, password: string) {\r\n        this.proxy.login(username, password);\r\n    }\r\n\r\n    register(username: string, password: string) {\r\n        this.proxy.register(username, password, \"YES\");\r\n    }\r\n\r\n    createGame(numPlayers: number, gameName: string) {\r\n    \t  const me = this.root.getCurrentUser();\r\n        this.proxy.createGame(me, numPlayers, gameName);\r\n    }\r\n\r\n    getGameList(){\r\n        this.proxy.getGameList();\r\n    }\r\n\r\n    joinGame(gameName: string, gameId: string) {\r\n    \t  const me = this.root.getCurrentUser();\r\n        this.proxy.joinGame(me, gameName, gameId);\r\n   }\r\n\r\n    startGame(gameId:string){\r\n    \tthis.proxy.startGame(gameId);\r\n    }\r\n\r\n}\r\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\r\nimport { ClientCommunicator } from \"./ClientCommunicator\";\r\n//import { Serializer } from \"./serializer\";\r\n\r\nexport class ServerProxy {\r\n    host: string;\r\n    port: string;\r\n    communicator: ClientCommunicator;\r\n    constructor(public commIn: ClientCommunicator) {\r\n        this.communicator = commIn;\r\n    }\r\n    public register(username:string, password:string, confirm:string){\r\n        var command = new ClientCommandObjects(\"ServerFacade\", \"register\", [\"_paramTypeString\", \"_paramTypeString\"], [username, password]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public login(username: string, password: string){\r\n        var command = new ClientCommandObjects(\"ServerFacade\", \"login\", [\"_paramTypeString\", \"_paramTypeString\"], [username, password]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public createGame(username: string, numPlayers: number, gameName: string){\r\n        var command = new ClientCommandObjects(\"ServerFacade\", \"createGame\", [\"_paramTypeString\", \"_paramTypeString\", \"_paramTypeInteger\"], [username, gameName, numPlayers]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public joinGame(username: string, gameName: string, gameId: string){\r\n        var command = new ClientCommandObjects(\"ServerFacade\", \"joinGame\", [\"_paramTypeString\", \"_paramTypeString\", \"_paramTypeString\"], [username, gameName, gameId]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public startGame(gameId: string){\r\n        var command = new ClientCommandObjects(\"ServerFacade\", \"startGame\", [\"_paramTypeString\"], [gameId]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public getGameList(){\r\n        var command = new ClientCommandObjects(\"ServerFacade\", \"getGameList\", [], []);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n}\r\n","export class ClientCommandObjects {\r\n    className: string;\r\n    methodName: string;\r\n    paramTypes: any[];\r\n    paramValues: any[];\r\n    constructor(public classNameIn: string, public methodNameIn: string, public paramTypesIn: any[], public paramValuesIn: any[]) {\r\n        this.className = classNameIn;\r\n        this.methodName = methodNameIn;\r\n        this.paramTypes = paramTypesIn;\r\n        this.paramValues = paramValuesIn;\r\n    }\r\n}\r\n"],"sourceRoot":""}