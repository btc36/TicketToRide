{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/Models/GameList.ts","webpack:///./src/Server/Poller.ts","webpack:///./src/Models/Player.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/ViewModels/LoginRegisterViewModel.ts","webpack:///./src/Views/LoginRegisterView.tsx","webpack:///./src/ViewModels/ILoginRegisterViewModel.ts","webpack:///./src/ViewModels/GameListViewModel.ts","webpack:///./src/Views/GameListView.tsx","webpack:///./src/ViewModels/IGameListViewModel.ts","webpack:///./src/ViewModels/GameLobbyViewModel.ts","webpack:///./src/Views/GameLobbyView.tsx","webpack:///./src/ViewModels/IGameLobbyViewModel.ts","webpack:///./src/Server/ClientCommunicator.ts","webpack:///./src/Models/LobbyGame.ts","webpack:///./src/Server/Serializer.ts","webpack:///./src/Services/ExternalClientFacade.ts","webpack:///./src/Models/ClientRoot.ts","webpack:///./src/Models/Session.ts","webpack:///./src/Services/InternalClientFacade.ts","webpack:///./src/Server/ServerProxy.ts","webpack:///./src/Server/ClientCommandObjects.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GameList","this","games","Array","addGame","game","push","removeGame","gameId","length","getGameID","splice","findGameById","replaceGameList","newGameList","getGames","Poller","methodIn","argsIn","frequencyIn","facadeIn","method","args","frequency","facade","polling","start","that_1","setInterval","getGameList","stop","clearInterval","Player","username","getUsername","ReactDOM","LoginRegisterViewModel_1","GameListViewModel_1","GameLobbyViewModel_1","ClientCommunicator_1","Serializer_1","ExternalClientFacade_1","ClientRoot_1","InternalClientFacade_1","ServerProxy_1","initialState","page","MainComponent","_super","_this","apply","arguments","state","loginRegisterViewModel","createElement","LoginRegisterViewModel","ref","instance","props","root","attach","main","services","gameListViewModel","GameListViewModel","gameLobbyViewModel","GameLobbyViewModel","__extends","render","Component","ClientRoot","externalClientFacade","ExternalClientFacade","serializer","Serializer","clientCommunicator","ClientCommunicator","serverProxy","ServerProxy","internalClientFacade","InternalClientFacade","document","getElementById","LoginRegisterView_1","ILoginRegisterViewModel_1","update","updateType","data","setState","errorMessage","onLoginButtonPressed","e","preventDefault","login","loginUserName","loginPassword","onRegisterButtonPressed","register","registerUserName","registerPassword","onLoginUserNameChange","target","onLoginPasswordChange","onRegisterUserNameChange","onRegisterPasswordChange","onRegisterConfirmPasswordChange","registerConfirmPassword","LoginRegisterView","component","className","onSubmit","type","onChange","GameListView_1","IGameListViewModel_1","Poller_1","gameList","createGameButtonPressed","createGame","createGameNumPlayers","createGameName","joinGameButtonPressed","console","log","gameName","String","selectedGame","gamename","gameID","joinGame","tableRowPressed","index","onCreateGameNameChange","onCreateGameNumPlayersChange","isJoinGameButtonDisabled","poller","componentWillUnmount","GameListView","rows","onClick","getGameName","getMaxPlayers","getNumPlayers","maxPlayer","disabled","initialGameList","GameLobbyView_1","IGameLobbyViewModel_1","playerList","getPlayerList","startGameButtonPressed","alert","getCurrentGameId","GameLobbyView","players","GameList_1","Player_1","LobbyGame_1","serverUrlIn","serverPortIn","serialIn","serverUrl","serverPort","clientFacade","sendCommand","command","toJSON","request","XMLHttpRequest","open","setRequestHeader","that","serial","onload","status","result","parseJSON","responseText","executeCommands","onerror","send","commands","_methodName","loginResults","_paramValues","registerResults","i_1","name_1","host","maxPlayers","LobbyGame","j","player","addPlayer","updateGameList","startGame","Error","removePlayer","JSON","stringify","parse","parseJSONGames","wasSuccessful","transitionPage","pageName","Session_1","myPlayer","lobby","session","Session","observers","detach","notify","_i","_a","setCurrentPage","getGameIdForUsername","getCurrentUser","setLoggedInUser","currentPage","loggedInUser","proxy","password","numPlayers","me","ClientCommandObjects_1","commIn","communicator","confirm","ClientCommandObjects","classNameIn","methodNameIn","paramTypesIn","paramValuesIn","_className","_paramTypes"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = React;","import { LobbyGame } from \"./LobbyGame\"\n\nexport class GameList {\n  games: Array<LobbyGame>;\n\n  [key: string]: any;\n\n  constructor() {\n    this.games = new Array<LobbyGame>();\n  }\n\n  addGame(game: LobbyGame): void {\n    this.games.push(game);\n  }\n\n  removeGame(gameId: string): void {\n    for (var i = this.games.length - 1; i >= 0; --i) {\n      if (this.games[i].getGameID() == gameId) {\n        this.games.splice(i, 1);\n      }\n    }\n  }\n\n  findGameById(gameId: string): LobbyGame {\n    for (let i = 0; i < this.games.length; i++) {\n      if (this.games[i].getGameID() == gameId) {\n        return this.games[i];\n      }\n    }\n  }\n\n  replaceGameList(newGameList: Array<LobbyGame>): void {\n    this.games = newGameList;\n  }\n\n  getGames(): Array<LobbyGame> {\n    return this.games;\n  }\n\n}\n","import { InternalClientFacade } from \"../Services/InternalClientFacade\";\n\nexport class Poller {\n  method: string;\n  args: any[];\n  frequency: number;\n  facade: InternalClientFacade;\n  polling: any;\n\n  constructor(methodIn: string, argsIn: any[], frequencyIn: number, facadeIn: InternalClientFacade) {\n    this.method = methodIn;\n    this.args = argsIn;\n    this.frequency = frequencyIn;\n    this.facade = facadeIn;\n    this.polling = null;\n  }\n\n  public start() {\n    if (this.method == \"getGameList\"){\n      let that = this;\n      //this.polling = setInterval(that.facade.getGameList, that.frequency);\n      this.polling = setInterval(() => { that.facade.getGameList() }, that.frequency);\n    }\n  }\n\n  public stop() {\n    clearInterval(this.polling);\n  }\n}\n","export class Player {\n  username: string;\n  constructor(username: string) {\n    this.username = username;\n  }\n  getUsername(): string {\n    return this.username;\n  }\n\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { LoginRegisterViewModel } from './ViewModels/LoginRegisterViewModel';\nimport { GameListViewModel } from './ViewModels/GameListViewModel';\nimport { GameLobbyViewModel } from './ViewModels/GameLobbyViewModel';\n\nimport { ClientCommunicator } from './Server/ClientCommunicator';\nimport { Serializer } from './Server/Serializer';\nimport { ExternalClientFacade } from './Services/ExternalClientFacade';\nimport { ClientRoot } from './Models/ClientRoot';\nimport { InternalClientFacade } from './Services/InternalClientFacade';\nimport { ServerProxy } from './Server/ServerProxy';\n\nexport const initialState = {\n  \"page\": \"loginRegister\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nclass MainComponent extends React.Component<any, any> {\n\n  state: State = initialState;\n  loginRegisterViewModel: JSX.Element = <LoginRegisterViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n  gameListViewModel: JSX.Element = <GameListViewModel ref={(instance: any) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n  gameLobbyViewModel: JSX.Element = <GameLobbyViewModel ref={(instance: any) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n\n  render(): JSX.Element {\n    if (this.state.page == \"loginRegister\") {\n      return this.loginRegisterViewModel;\n    } else if (this.state.page == \"gameList\") {\n      return this.gameListViewModel;\n    } else if (this.state.page == \"lobbyGame\") {\n      return this.gameLobbyViewModel;\n    } else {\n      return <p>Page {this.state.page} not found.</p>;\n    }\n  }\n}\n\nconst root = new ClientRoot();\nconst externalClientFacade = new ExternalClientFacade(root);\nconst serializer = new Serializer();\nconst clientCommunicator = new ClientCommunicator(\"localhost\", \"8080\", serializer, externalClientFacade);\nconst serverProxy = new ServerProxy(clientCommunicator);\nconst internalClientFacade = new InternalClientFacade(serverProxy, root);\n\nReactDOM.render(\n  <MainComponent services={internalClientFacade} root={root}/>,\n  document.getElementById(\"example\")\n);\n","module.exports = ReactDOM;","import * as React from \"react\";\nimport { LoginRegisterView } from \"../Views/LoginRegisterView\";\nimport { initialState, State, ILoginRegisterViewModel } from \"./ILoginRegisterViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\n\nexport class LoginRegisterViewModel extends React.Component<ViewModelProps, State> implements ILoginRegisterViewModel, IObserver {\n\n  state: State = initialState;\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"error\") {\n      this.setState({\"errorMessage\": data});\n    }\n  }\n\n  onLoginButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.login(this.state.loginUserName, this.state.loginPassword);\n  }\n\n  onRegisterButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.register(this.state.registerUserName, this.state.registerPassword);\n  }\n\n  onLoginUserNameChange = (e: any) => {\n    this.setState({\"loginUserName\": e.target.value});\n  }\n\n  onLoginPasswordChange = (e: any) => {\n    this.setState({\"loginPassword\": e.target.value});\n  }\n\n  onRegisterUserNameChange = (e: any) => {\n    this.setState({\"registerUserName\": e.target.value});\n  }\n\n  onRegisterPasswordChange = (e: any) => {\n    this.setState({\"registerPassword\": e.target.value});\n  }\n\n  onRegisterConfirmPasswordChange = (e: any) => {\n    this.setState({\"registerConfirmPassword\": e.target.value});\n  }\n\n  render(): JSX.Element {\n    return LoginRegisterView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/ILoginRegisterViewModel\";\n\nexport const LoginRegisterView = (component: I.ILoginRegisterViewModel) => {\n    return (\n      <div className=\"view\">\n        <p>{component.state.errorMessage}</p>\n        <div className=\"half-partition\">\n          <h1>Login</h1>\n          <form onSubmit={component.onLoginButtonPressed}>\n            <p>\n              <label>User Name:<br />\n                <input type=\"text\" name=\"login-username\" value={component.state.loginUserName} onChange={component.onLoginUserNameChange} />\n              </label> \n            </p>\n            <p>\n              <label>Password:<br />\n                <input type=\"text\" name=\"login-password\" value={component.state.loginPassword} onChange={component.onLoginPasswordChange}/>\n              </label>\n            </p>\n            <p><input type=\"submit\" value=\"Log in\" /></p>\n          </form>\n        </div>\n        <div className=\"half-partition\">\n          <h1>Register</h1>\n          <form onSubmit={component.onRegisterButtonPressed}>\n            <p>\n              <label>User Name:<br />\n                <input type=\"text\" name=\"register-username\" value={component.state.registerUserName} onChange={component.onRegisterUserNameChange}/>\n              </label>\n            </p>\n            <p>\n              <label>Password:<br />\n                <input type=\"text\" name=\"register-password\" value={component.state.registerPassword} onChange={component.onRegisterPasswordChange}/>\n              </label>\n            </p>\n            <p>\n              <label>Confirm password:<br />\n                <input type=\"text\" name=\"register-confirm-password\" value={component.state.registerConfirmPassword} onChange={component.onRegisterConfirmPasswordChange}/>\n              </label>\n            </p>\n            <input type=\"submit\" value=\"Register\" />\n          </form>\n        </div>\n      </div>\n    );\n}\n","export const initialState = {\n  loginUserName: \"\",\n  loginPassword: \"\",\n  registerUserName: \"\",\n  registerPassword: \"\",\n  registerConfirmPassword: \"\",\n  errorMessage: \"\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface ILoginRegisterViewModel {\n  state: State;\n  onLoginButtonPressed(e: any): void;\n  onRegisterButtonPressed(e: any): void;\n  onLoginUserNameChange(e: any): void;\n  onLoginPasswordChange(e: any): void;\n  onRegisterUserNameChange(e: any): void;\n  onRegisterPasswordChange(e: any): void;\n  onRegisterConfirmPasswordChange(e: any): void;\n}\n","import * as React from \"react\";\nimport { GameListView } from \"../Views/GameListView\";\nimport { initialState, State, IGameListViewModel } from \"./IGameListViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\nimport { Poller } from \"../Server/Poller\";\n\nexport class GameListViewModel extends React.Component<ViewModelProps, State> implements IGameListViewModel, IObserver {\n\n  state: State;\n  poller: Poller;\n\n  constructor(props: ViewModelProps) {\n    super(props);\n    this.state = initialState;\n    this.props.services.getGameList();\n    this.poller = new Poller(\"getGameList\", [], 2000, this.props.services);\n    this.poller.start();\n  }\n\n  componentWillUnmount(){\n    this.poller.stop();\n  }\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"updateGameList\") {\n      this.setState({\"gameList\": data});\n    } else if (updateType == \"error\") {\n      this.setState({\"errorMessage\": data});\n    }\n  }\n\n  createGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.createGame(this.state.createGameNumPlayers, this.state.createGameName);\n  }\n\n  joinGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    console.log(this.state);\n    const gameName: string = String(this.state.gameList.games[this.state.selectedGame].gamename);\n    const gameId: string = String(this.state.gameList.games[this.state.selectedGame].gameID);\n    this.props.services.joinGame(gameName, gameId);\n  }\n\n  tableRowPressed = (index: number) => {\n    this.setState({selectedGame: index});\n  }\n\n  onCreateGameNameChange = (e: any) => {\n    this.setState({createGameName: e.target.value});\n  }\n\n  onCreateGameNumPlayersChange = (e: any) => {\n    this.setState({createGameNumPlayers: e.target.value});\n  }\n\n\n  isJoinGameButtonDisabled = () => {\n    return this.state.selectedGame != -1;\n  }\n\n  render(): JSX.Element {\n    return GameListView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/IGameListViewModel\";\n\nexport const GameListView = (component: I.IGameListViewModel) => {\n  const rows = [];\n  const gameList = component.state.gameList.getGames();\n  for (let i = 0; i < gameList.length; i++) {\n    rows.push(\n      <tr onClick={() => component.tableRowPressed(i)} className={component.state.selectedGame == i ? \"active\" : \"\"} key={i}>\n        <td>{gameList[i].getGameID()}</td>\n        <td>{gameList[i].getGameName()}</td>\n        <td>{gameList[i].getMaxPlayers()}</td>\n        <td>{gameList[i].getNumPlayers()}/{gameList[i].maxPlayer}</td>\n      </tr>\n    );\n  }\n  return (\n    <div className=\"view\">\n      <p>{component.state.errorMessage}</p>\n      <div className=\"half-partition\">\n        <table>\n          <tbody>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Players</th>\n              <th>In-Game</th>\n            </tr>\n            {rows}\n          </tbody>\n        </table>\n        <p>\n          <button onClick={component.joinGameButtonPressed} disabled={component.state.selectedGame == -1}>Join Game</button>\n        </p>\n      </div>\n      <div className=\"half-partition\">\n        <form onSubmit={component.createGameButtonPressed}>\n          <p>\n            <label>Name:<br />\n              <input type=\"text\" value={component.state.createGameName} onChange={component.onCreateGameNameChange}/>\n            </label>\n          </p>\n          <p>\n            <label>Number of players:<br />\n              <input type=\"text\" value={component.state.createGameNumPlayers} onChange={component.onCreateGameNumPlayersChange}/>\n            </label>\n          </p>\n          <input type=\"submit\" value=\"Create Game\" className=\"wide-button\" />\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { GameList } from \"../Models/GameList\";\n\nconst initialGameList: GameList = new GameList();\n\nexport const initialState = {\n  gameList: initialGameList,\n  selectedGame: -1,\n  createGameName: \"\",\n  createGameNumPlayers: 0,\n  errorMessage: \"\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface IGameListViewModel {\n  state: State;\n  createGameButtonPressed(e: any): void;\n  joinGameButtonPressed(e: any): void;\n  tableRowPressed(index: number): void;\n  onCreateGameNameChange(e: any): void;\n  onCreateGameNumPlayersChange(e: any): void;\n  isJoinGameButtonDisabled(): boolean;\n}\n","import * as React from \"react\";\nimport { GameLobbyView } from \"../Views/GameLobbyView\";\nimport { initialState, State, IGameLobbyViewModel } from \"./IGameLobbyViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\nimport { Poller } from \"../Server/Poller\";\n\nexport class GameLobbyViewModel extends React.Component<ViewModelProps, State> implements IGameLobbyViewModel, IObserver {\n\n  state: State = initialState;\n  poller: Poller;\n  gameId: string;\n\n  constructor(props: ViewModelProps) {\n    super(props);\n    this.gameId = this.props.services.getCurrentGameId();\n    this.state = {\n      playerList: this.props.services.getPlayerList(this.gameId)\n    };\n    this.props.services.getGameList();\n    this.poller = new Poller(\"getGameList\", [], 2000, this.props.services);\n    this.poller.start();\n  }\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"updateGameList\") {\n      this.setState({\"playerList\": this.props.services.getPlayerList(this.gameId)});\n    }\n  }\n\n  startGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    alert(\"starting game...\");\n  }\n\n  render(): JSX.Element {\n    return GameLobbyView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/IGameLobbyViewModel\";\n\nexport const GameLobbyView  = (component: I.IGameLobbyViewModel) => {\n  const players = [];\n  const playerList = component.state.playerList;\n  for (let i = 0; i < playerList.length; i++) {\n    players.push(\n      <li key={i}>{playerList[i].username}</li>\n    );\n  }\n  return (\n    <div className=\"view\">\n      <div className=\"half-partition\">\n        <p><b><u>Players</u></b></p>\n        <ul>\n          {players}\n        </ul>\n        <p><button onClick={component.startGameButtonPressed} disabled={playerList.length < 2}>Start Game</button></p>\n      </div>\n    </div>\n  );\n}\n","import { Player } from \"../Models/Player\";\n\nconst initialPlayerList: Array<Player> = [];\n\nexport const initialState = {\n  playerList: initialPlayerList\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface IGameLobbyViewModel {\n  state: State;\n  startGameButtonPressed(e: any): void;\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { Serializer } from \"./Serializer\";\nimport { ExternalClientFacade } from \"../Services/ExternalClientFacade\";\nimport { GameList } from \"../Models/GameList\";\nimport { Player } from \"../Models/Player\";\nimport { LobbyGame } from \"../Models/LobbyGame\";\n\nexport class ClientCommunicator {\n  serverUrl: string;\n  serverPort: string;\n  serializer: Serializer;\n  clientFacade: ExternalClientFacade;\n\n  constructor(public serverUrlIn: string, public serverPortIn: string, public serialIn: Serializer, public facadeIn: ExternalClientFacade) {\n    this.serverUrl = serverUrlIn;\n    this.serverPort = serverPortIn;\n    this.serializer = serialIn;\n    this.clientFacade = facadeIn;\n  }\n  public sendCommand(command: ClientCommandObjects){\n    var data = this.serializer.toJSON(command);\n    var request = new XMLHttpRequest();\n    request.open('POST', \"/command\", true);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n    let that = this;\n    let serial = this.serializer;\n    request.onload = function() {\n      if (request.status >= 200 && request.status < 400) {\n        // Success!\n        var result = serial.parseJSON(request.responseText);\n        that.executeCommands(result);\n      } else {\n        // We reached our target server, but it returned an error\n\n      }\n    };\n\n    request.onerror = function() {\n      // There was a connection error of some sort\n    };\n    request.send(data);\n  }\n\n  public executeCommands(commands: ClientCommandObjects[]){\n    for (var i = 0; i < commands.length; i++){\n      if (commands[i]._methodName == \"loginStatus\"){\n        this.clientFacade.loginResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\n      }\n      else if (commands[i]._methodName == \"registerStatus\"){\n        this.clientFacade.registerResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\n      }\n      else if (commands[i]._methodName == \"updateGameList\"){\n        const games = commands[i]._paramValues[2];\n        const gameList = new GameList();\n        for (let i = 0; i < games.length; i++) {\n          const gameID = games[i].gameID;\n          const name = games[i].gamename;\n          const host = new Player(games[i].host);\n          const maxPlayers = games[i].maxPlayer;\n          const game = new LobbyGame(gameID, host, name, maxPlayers);\n\n          const players = games[i].playerList.playerList;\n          for (let j = 0; j < players.length; j++) {\n            const player = new Player(players[j].username);\n            game.addPlayer(player);\n          }\n          gameList.addGame(game);\n        }\n        this.clientFacade.updateGameList(commands[i]._paramValues[0], gameList, commands[i]._paramValues[1]);\n      }\n      else if (commands[i]._methodName == \"joinGame\"){\n        this.clientFacade.joinGame(commands[i]._paramValues[2]);\n      }\n      else if (commands[i]._methodName == \"startGame\"){\n        this.clientFacade.startGame(commands[i]._paramValues[2]);\n      }\n    }\n  }\n}\n","import { Player } from \"./Player\"\n\nexport class LobbyGame {\n  gameID: string;\n  gamename: string;\n  playerList: Array<Player>;\n  maxPlayer: number;\n  currentPlayerNum: number;\n  host: Player;\n\n\n  constructor(gameID: string, host: Player, name: string, maxPlayers: number) {\n    this.gameID = gameID;\n    this.host = host;\n    this.gamename = name;\n    this.maxPlayer = maxPlayers;\n    this.playerList = new Array<Player>();\n  }\n\n  getPlayerList(): Array<Player> {\n    return this.playerList;\n  }\n\n  getGameID(): string {\n    return this.gameID;\n  }\n\n  getGameName(): string {\n    return this.gamename;\n  }\n\n  getMaxPlayers(): number {\n    return this.maxPlayer;\n  }\n\n  getNumPlayers(): number {\n    return this.playerList.length;\n  }\n\n  addPlayer(player: Player) {\n    //If this would push it over the max, throw an error\n    if (this.getNumPlayers() == this.maxPlayer) {\n      throw Error(\"You already have the maximum number of Players\");\n    }\n    this.playerList.push(player);\n  }\n\n  removePlayer(username: string) {\n    for (var i = this.playerList.length - 1; i >= 0; --i) {\n      if (this.playerList[i].getUsername() == username) {\n        this.playerList.splice(i, 1);\n      }\n    }\n  }\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { GameList } from \"../Models/GameList\";\n\nexport class Serializer {\n  constructor() {\n  }\n  public toJSON(command: ClientCommandObjects){\n    const myCommand = JSON.stringify([command]);\n    return myCommand;\n  }\n  public parseJSON(command: string){\n    const myCommand: ClientCommandObjects[] = JSON.parse(command);\n    return myCommand;\n  }\n  public parseJSONGames(games: string){\n    const gameList: GameList = JSON.parse(games);\n    return gameList;\n  }\n}\n","import { ClientRoot } from \"../Models/ClientRoot\";\nimport { LobbyGame } from \"../Models/LobbyGame\";\nimport { GameList } from \"../Models/GameList\";\n\nexport class ExternalClientFacade {\n  root: ClientRoot;\n\n  constructor(root: ClientRoot) {\n    this.root = root;\n  }\n  loginResults(wasSuccessful: boolean, errorMessage: string) {\n    this.root.loginResults(wasSuccessful, errorMessage);\n  }\n\n  registerResults(wasSuccessful: boolean, errorMessage: string) {\n    this.root.registerResults(wasSuccessful, errorMessage);\n  }\n\n  updateGameList(wasSuccessful: boolean, games: GameList, errorMessage: string) {\n    this.root.updateGameList(wasSuccessful, games, errorMessage);\n  }\n\n  transitionPage(pageName: string) {\n    this.root.transitionPage(pageName);\n  }\n\n  getGameList(): Array<LobbyGame> {\n    let gameList = this.root.getGameList();\n    return gameList;\n  }\n\n  joinGame(gameId: string) {\n    this.root.joinGame(gameId);\n  }\n\n  startGame(gameId:string){\n    this.root.startGame(gameId);\n  }\n\n}\n","import { GameList } from \"./GameList\"\nimport { Player } from \"./Player\"\nimport { LobbyGame } from \"./LobbyGame\"\nimport { Session } from \"./Session\"\nimport { IObserver } from \"../ViewModels/IObserver\"\nimport { ISubject } from \"./ISubject\"\n\n\nexport class ClientRoot implements ISubject {\n  gameList: GameList;\n  myPlayer: Player;\n  lobby: LobbyGame;\n  session: Session;\n  observers: Array<IObserver>;\n\n  constructor() {\n    this.gameList = new GameList();\n    this.myPlayer = null;\n    this.lobby = null;\n    this.session = new Session();\n    this.observers = new Array<IObserver>();\n  }\n\n  public attach(o: IObserver) {\n    this.observers.push(o); \n  }\n\n  public detach(o: IObserver) {\n\n  }\n\n  notify(updateType: string, data: any) {\n    for (const o of this.observers) {\n      if (o != null) {\n        o.update(updateType, data);\n      }\n    }\n  }\n  transitionPage(pageName: string) {\n    this.session.setCurrentPage(pageName);\n    this.notify(\"transitionPage\", pageName);\n  }\n\n\n  getGameList(): Array<LobbyGame> {\n    let games = this.gameList.getGames();\n    return games;\n  }\n\n  getGameIdForUsername(username: string) {\n    let games = this.gameList.getGames();\n    for (let i = 0; i < games.length; i++) {\n      for (let j = 0; j < games[i].playerList.length; j++) {\n        if (games[i].playerList[j].username == username) {\n          return games[i].gameID;\n        }\n      }\n    }\n  }\n\n  getPlayerList(gameId: string) {\n    let game = this.gameList.findGameById(gameId);\n    return game.getPlayerList();\n  }\n\n  joinGame(gameId: string) {\n    let game = this.gameList.findGameById(gameId);\n    game.addPlayer(this.myPlayer);\n    this.transitionPage(\"lobbyGame\");\n  }\n\n  getCurrentUser(){\n    return this.myPlayer.getUsername();\n  }\n\n  updateGameList(wasSuccessful: boolean, gameList: GameList, errorMessage: string) {\n    if (wasSuccessful) {\n      this.gameList.replaceGameList(gameList.getGames());\n      this.notify(\"updateGameList\", this.gameList);\n    } else {\n      this.notify(\"error\", errorMessage);\n    }\n  }\n\n  startGame(gameId:string){\n    this.notify(\"startGame\",gameId);\n  }\n\n  loginResults(wasSuccessful: boolean, data: string) {\n    if (wasSuccessful) {\n      this.myPlayer = new Player(data);\n      this.session.setLoggedInUser(this.myPlayer);\n      this.transitionPage(\"gameList\");\n    } else {\n      this.notify(\"error\", data);\n    }\n  }\n\n  registerResults(wasSuccessful: boolean, data: string) {\n    if (wasSuccessful) {\n      this.myPlayer = new Player(data);\n      this.session.setLoggedInUser(this.myPlayer);\n      this.transitionPage(\"gameList\");\n    } else {\n      this.notify(\"error\", data);\n    }\n  }\n\n\n}\n","import {Player} from \"./Player\"\n\nexport class Session {\n  // authToken: string;\n  currentPage: string;\n  loggedInUser: Player;\n\n  constructor() {\n    //this.authToken = auth;\n    this.currentPage = \"Login\";\n    this.loggedInUser = null;\n  }\n\n  /* get getAuth(): string {\n        return this.authToken;\n    }\n\n    set setAuth(auth: string) {\n        this.authToken = auth;\n    }\n   */\n  get getCurrentPage(): string {\n    return this.currentPage;\n  }\n\n  setCurrentPage(page: string) {\n    this.currentPage = page;\n  }\n\n  get getLoggedInUser(): Player {\n    return this.loggedInUser;\n  }\n\n  setLoggedInUser(player: Player) {\n    this.loggedInUser = player;\n  }\n\n}\n","import { ServerProxy } from \"../Server/ServerProxy\";\nimport { ClientRoot } from \"../Models/ClientRoot\";\n\nexport class InternalClientFacade {\n  proxy: ServerProxy;\n  root: ClientRoot;\n\n  constructor(proxy:ServerProxy,root:ClientRoot) {\n    this.proxy = proxy;\n    this.root = root;\n  }\n\n  login(username: string, password: string) {\n    this.proxy.login(username, password);\n  }\n\n  register(username: string, password: string) {\n    this.proxy.register(username, password, \"YES\");\n  }\n\n  createGame(numPlayers: number, gameName: string) {\n    const me = this.root.getCurrentUser();\n    this.proxy.createGame(me, numPlayers, gameName);\n  }\n\n  getGameList(){\n    this.proxy.getGameList();\n  }\n\n  getPlayerList(gameId: string) {\n    return this.root.getPlayerList(gameId);\n  }\n\n  getCurrentGameId(): string {\n    return this.root.getGameIdForUsername(this.root.getCurrentUser());\n  }\n\n  joinGame(gameName: string, gameId: string) {\n    const me = this.root.getCurrentUser();\n    this.proxy.joinGame(me, gameName, gameId);\n  }\n\n  startGame(gameId:string){\n    this.proxy.startGame(gameId);\n  }\n\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { ClientCommunicator } from \"./ClientCommunicator\";\n//import { Serializer } from \"./serializer\";\n\nexport class ServerProxy {\n  host: string;\n  port: string;\n  communicator: ClientCommunicator;\n  constructor(public commIn: ClientCommunicator) {\n    this.communicator = commIn;\n  }\n  public register(username:string, password:string, confirm:string){\n    const command = new ClientCommandObjects(\"server.ServerFacade\", \"register\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\n    this.communicator.sendCommand(command);\n  }\n  public login(username: string, password: string){\n    const command = new ClientCommandObjects(\"server.ServerFacade\", \"login\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\n    this.communicator.sendCommand(command);\n  }\n  public createGame(username: string, numPlayers: number, gameName: string){\n    const command = new ClientCommandObjects(\"server.ServerFacade\", \"createGame\", [\"java.lang.String\", \"java.lang.String\", \"java.lang.String\"], [username, gameName, String(numPlayers)]);\n    this.communicator.sendCommand(command);\n  }\n  public joinGame(username: string, gameName: string, gameId: string){\n    const command = new ClientCommandObjects(\"server.ServerFacade\", \"joinGame\", [\"java.lang.String\", \"java.lang.String\"], [username, gameId]);\n    this.communicator.sendCommand(command);\n  }\n  public startGame(gameId: string){\n    const command = new ClientCommandObjects(\"server.ServerFacade\", \"startGame\", [\"java.lang.String\"], [gameId]);\n    this.communicator.sendCommand(command);\n  }\n  public getGameList(){\n    const command = new ClientCommandObjects(\"server.ServerFacade\", \"getGameList\", [], []);\n    this.communicator.sendCommand(command);\n  }\n}\n","export class ClientCommandObjects {\n  _className: string;\n  _methodName: string;\n  _paramTypes: any[];\n  _paramValues: any[];\n  constructor(classNameIn: string, methodNameIn: string, paramTypesIn: any[], paramValuesIn: any[]) {\n    this._className = classNameIn;\n    this._methodName = methodNameIn;\n    this._paramTypes = paramTypesIn;\n    this._paramValues = paramValuesIn;\n  }\n}\n"],"sourceRoot":""}