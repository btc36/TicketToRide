{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/Models/GameList.ts","webpack:///./src/Models/Player.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/ViewModels/LoginRegisterViewModel.ts","webpack:///./src/Views/LoginRegisterView.tsx","webpack:///./src/ViewModels/ILoginRegisterViewModel.ts","webpack:///./src/ViewModels/GameListViewModel.ts","webpack:///./src/Views/GameListView.tsx","webpack:///./src/ViewModels/IGameListViewModel.ts","webpack:///./src/ViewModels/GameLobbyViewModel.ts","webpack:///./src/Views/GameLobbyView.tsx","webpack:///./src/ViewModels/IGameLobbyViewModel.ts","webpack:///./src/Server/ClientCommunicator.ts","webpack:///./src/Models/LobbyGame.ts","webpack:///./src/Server/Serializer.ts","webpack:///./src/Services/ExternalClientFacade.ts","webpack:///./src/Models/ClientRoot.ts","webpack:///./src/Models/Session.ts","webpack:///./src/Services/InternalClientFacade.ts","webpack:///./src/Server/ServerProxy.ts","webpack:///./src/Server/ClientCommandObjects.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GameList","this","games","Array","addGame","game","push","removeGame","gameId","length","getGameID","splice","findGameById","replaceGameList","newGameList","getGames","Player","username","getUsername","ReactDOM","LoginRegisterViewModel_1","GameListViewModel_1","GameLobbyViewModel_1","ClientCommunicator_1","Serializer_1","ExternalClientFacade_1","ClientRoot_1","InternalClientFacade_1","ServerProxy_1","initialState","page","MainComponent","_super","_this","apply","arguments","state","loginRegisterViewModel","createElement","LoginRegisterViewModel","ref","instance","props","root","attach","main","services","gameListViewModel","GameListViewModel","gameLobbyViewModel","GameLobbyViewModel","__extends","render","Component","ClientRoot","externalClientFacade","ExternalClientFacade","serializer","Serializer","clientCommunicator","ClientCommunicator","serverProxy","ServerProxy","internalClientFacade","InternalClientFacade","document","getElementById","LoginRegisterView_1","ILoginRegisterViewModel_1","update","updateType","data","setState","errorMessage","onLoginButtonPressed","e","preventDefault","login","loginUserName","loginPassword","onRegisterButtonPressed","register","registerUserName","registerPassword","onLoginUserNameChange","target","onLoginPasswordChange","onRegisterUserNameChange","onRegisterPasswordChange","onRegisterConfirmPasswordChange","registerConfirmPassword","LoginRegisterView","component","className","onSubmit","type","onChange","GameListView_1","IGameListViewModel_1","gameList","createGameButtonPressed","createGame","createGameNumPlayers","createGameName","joinGameButtonPressed","console","log","gameName","String","selectedGame","gamename","gameID","joinGame","tableRowPressed","index","onCreateGameNameChange","onCreateGameNumPlayersChange","isJoinGameButtonDisabled","getGameList","GameListView","rows","onClick","getGameName","getMaxPlayers","getNumPlayers","maxPlayer","disabled","initialGameList","GameLobbyView_1","IGameLobbyViewModel_1","playerList","getPlayerList","startGameButtonPressed","alert","getCurrentGameId","GameLobbyView","players","num","GameList_1","Player_1","LobbyGame_1","serverUrlIn","serverPortIn","serialIn","facadeIn","serverUrl","serverPort","clientFacade","sendCommand","command","toJSON","request","XMLHttpRequest","open","setRequestHeader","that","serial","onload","status","result","parseJSON","responseText","executeCommands","onerror","send","commands","_methodName","loginResults","_paramValues","registerResults","i_1","name_1","host","maxPlayers","LobbyGame","j","player","addPlayer","updateGameList","startGame","Error","removePlayer","JSON","stringify","parse","parseJSONGames","wasSuccessful","transitionPage","pageName","Session_1","myPlayer","lobby","session","Session","observers","detach","notify","_i","_a","setCurrentPage","getGameIdForUsername","getCurrentUser","setLoggedInUser","currentPage","loggedInUser","proxy","password","numPlayers","me","ClientCommandObjects_1","commIn","communicator","confirm","ClientCommandObjects","classNameIn","methodNameIn","paramTypesIn","paramValuesIn","_className","_paramTypes"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = React;","import { LobbyGame } from \"./LobbyGame\"\n\nexport class GameList {\n    games: Array<LobbyGame>;\n\n    [key: string]: any;\n\n    constructor() {\n        this.games = new Array<LobbyGame>();\n    }\n\n    addGame(game: LobbyGame): void {\n        this.games.push(game);\n    }\n\n    removeGame(gameId: string): void {\n        for (var i = this.games.length - 1; i >= 0; --i) {\n            if (this.games[i].getGameID() == gameId) {\n                this.games.splice(i, 1);\n            }\n        }\n    }\n\n    findGameById(gameId: string): LobbyGame {\n        for (let i = 0; i < this.games.length; i++) {\n            if (this.games[i].getGameID() == gameId) {\n                return this.games[i];\n            }\n        }\n    }\n\n    replaceGameList(newGameList: Array<LobbyGame>): void {\n        this.games = newGameList;\n    }\n\n    getGames(): Array<LobbyGame> {\n        return this.games;\n    }\n\n}\n","export class Player {\n    username: string;\n    constructor(username: string) {\n        this.username = username;\n    }\n    getUsername(): string {\n        return this.username;\n    }\n\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { LoginRegisterViewModel } from './ViewModels/LoginRegisterViewModel';\nimport { GameListViewModel } from './ViewModels/GameListViewModel';\nimport { GameLobbyViewModel } from './ViewModels/GameLobbyViewModel';\n\nimport { ClientCommunicator } from './Server/ClientCommunicator';\nimport { Serializer } from './Server/Serializer';\nimport { ExternalClientFacade } from './Services/ExternalClientFacade';\nimport { ClientRoot } from './Models/ClientRoot';\nimport { InternalClientFacade } from './Services/InternalClientFacade';\nimport { ServerProxy } from './Server/ServerProxy';\n\nexport const initialState = {\n  \"page\": \"loginRegister\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nclass MainComponent extends React.Component<any, any> {\n\n  state: State = initialState;\n  loginRegisterViewModel: JSX.Element = <LoginRegisterViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n  gameListViewModel: JSX.Element = <GameListViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n  gameLobbyViewModel: JSX.Element = <GameLobbyViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n\n  render(): JSX.Element {\n    if (this.state.page == \"loginRegister\") {\n      return this.loginRegisterViewModel;\n    } else if (this.state.page == \"gameList\") {\n      return this.gameListViewModel;\n    } else if (this.state.page == \"lobbyGame\") {\n      return this.gameLobbyViewModel;\n    } else {\n      return <p>Page {this.state.page} not found.</p>;\n    }\n  }\n}\n\nconst root = new ClientRoot();\nconst externalClientFacade = new ExternalClientFacade(root);\nconst serializer = new Serializer();\nconst clientCommunicator = new ClientCommunicator(\"localhost\", \"8080\", serializer, externalClientFacade);\nconst serverProxy = new ServerProxy(clientCommunicator);\nconst internalClientFacade = new InternalClientFacade(serverProxy, root);\n\nReactDOM.render(\n    <MainComponent services={internalClientFacade} root={root}/>,\n    document.getElementById(\"example\")\n);\n","module.exports = ReactDOM;","import * as React from \"react\";\nimport { LoginRegisterView } from \"../Views/LoginRegisterView\";\nimport { initialState, State, ILoginRegisterViewModel } from \"./ILoginRegisterViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\n\nexport class LoginRegisterViewModel extends React.Component<ViewModelProps, State> implements ILoginRegisterViewModel, IObserver {\n\n  state: State = initialState;\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"error\") {\n      this.setState({\"errorMessage\": data});\n    }\n  }\n\n  onLoginButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.login(this.state.loginUserName, this.state.loginPassword);\n  }\n\n  onRegisterButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.register(this.state.registerUserName, this.state.registerPassword);\n  }\n\n  onLoginUserNameChange = (e: any) => {\n    this.setState({\"loginUserName\": e.target.value});\n  }\n\n  onLoginPasswordChange = (e: any) => {\n    this.setState({\"loginPassword\": e.target.value});\n  }\n\n  onRegisterUserNameChange = (e: any) => {\n    this.setState({\"registerUserName\": e.target.value});\n  }\n\n  onRegisterPasswordChange = (e: any) => {\n    this.setState({\"registerPassword\": e.target.value});\n  }\n\n  onRegisterConfirmPasswordChange = (e: any) => {\n    this.setState({\"registerConfirmPassword\": e.target.value});\n  }\n\n  render(): JSX.Element {\n    return LoginRegisterView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/ILoginRegisterViewModel\";\n\nexport const LoginRegisterView = (component: I.ILoginRegisterViewModel) => {\n    return (\n      <div className=\"view\">\n        <p>{component.state.errorMessage}</p>\n        <div className=\"half-partition\">\n          <h1>Login</h1>\n          <form onSubmit={component.onLoginButtonPressed}>\n            <p>\n              <label>User Name:<br />\n                <input type=\"text\" name=\"login-username\" value={component.state.loginUserName} onChange={component.onLoginUserNameChange} />\n              </label> \n            </p>\n            <p>\n              <label>Password:<br />\n                <input type=\"text\" name=\"login-password\" value={component.state.loginPassword} onChange={component.onLoginPasswordChange}/>\n              </label>\n            </p>\n            <p><input type=\"submit\" value=\"Log in\" /></p>\n          </form>\n        </div>\n        <div className=\"half-partition\">\n          <h1>Register</h1>\n          <form onSubmit={component.onRegisterButtonPressed}>\n            <p>\n              <label>User Name:<br />\n                <input type=\"text\" name=\"register-username\" value={component.state.registerUserName} onChange={component.onRegisterUserNameChange}/>\n              </label>\n            </p>\n            <p>\n              <label>Password:<br />\n                <input type=\"text\" name=\"register-password\" value={component.state.registerPassword} onChange={component.onRegisterPasswordChange}/>\n              </label>\n            </p>\n            <p>\n              <label>Confirm password:<br />\n                <input type=\"text\" name=\"register-confirm-password\" value={component.state.registerConfirmPassword} onChange={component.onRegisterConfirmPasswordChange}/>\n              </label>\n            </p>\n            <input type=\"submit\" value=\"Register\" />\n          </form>\n        </div>\n      </div>\n    );\n}\n","export const initialState = {\n  loginUserName: \"\",\n  loginPassword: \"\",\n  registerUserName: \"\",\n  registerPassword: \"\",\n  registerConfirmPassword: \"\",\n  errorMessage: \"\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface ILoginRegisterViewModel {\n  state: State;\n  onLoginButtonPressed(e: any): void;\n  onRegisterButtonPressed(e: any): void;\n  onLoginUserNameChange(e: any): void;\n  onLoginPasswordChange(e: any): void;\n  onRegisterUserNameChange(e: any): void;\n  onRegisterPasswordChange(e: any): void;\n  onRegisterConfirmPasswordChange(e: any): void;\n}\n","import * as React from \"react\";\nimport { GameListView } from \"../Views/GameListView\";\nimport { initialState, State, IGameListViewModel } from \"./IGameListViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\n\nexport class GameListViewModel extends React.Component<ViewModelProps, State> implements IGameListViewModel, IObserver {\n\n  state: State;\n\n  constructor(props: ViewModelProps) {\n    super(props);\n    this.state = initialState;\n    this.props.services.getGameList();\n  }\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"updateGameList\") {\n      this.setState({\"gameList\": data});\n    } else if (updateType == \"error\") {\n      this.setState({\"errorMessage\": data});\n    }\n  }\n\n  createGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.createGame(this.state.createGameNumPlayers, this.state.createGameName);\n  }\n\n  joinGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    console.log(this.state);\n    const gameName: string = String(this.state.gameList.games[this.state.selectedGame].gamename);\n    const gameId: string = String(this.state.gameList.games[this.state.selectedGame].gameID);\n    this.props.services.joinGame(gameName, gameId);\n  }\n\n  tableRowPressed = (index: number) => {\n    this.setState({selectedGame: index});\n  }\n\n  onCreateGameNameChange = (e: any) => {\n    this.setState({createGameName: e.target.value});\n  }\n\n  onCreateGameNumPlayersChange = (e: any) => {\n    this.setState({createGameNumPlayers: e.target.value});\n  }\n\n\n  isJoinGameButtonDisabled = () => {\n    return this.state.selectedGame != -1;\n  }\n\n  render(): JSX.Element {\n    return GameListView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/IGameListViewModel\";\n\nexport const GameListView = (component: I.IGameListViewModel) => {\n  const rows = [];\n  const gameList = component.state.gameList.getGames();\n  for (let i = 0; i < gameList.length; i++) {\n    rows.push(\n      <tr onClick={() => component.tableRowPressed(i)} className={component.state.selectedGame == i ? \"active\" : \"\"} key={i}>\n        <td>{gameList[i].getGameID()}</td>\n        <td>{gameList[i].getGameName()}</td>\n        <td>{gameList[i].getMaxPlayers()}</td>\n        <td>{gameList[i].getNumPlayers()}/{gameList[i].maxPlayer}</td>\n      </tr>\n    );\n  }\n  return (\n    <div className=\"view\">\n      <p>{component.state.errorMessage}</p>\n      <div className=\"half-partition\">\n        <table>\n          <tbody>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Players</th>\n              <th>In-Game</th>\n            </tr>\n            {rows}\n          </tbody>\n        </table>\n        <p>\n          <button onClick={component.joinGameButtonPressed} disabled={component.state.selectedGame == -1}>Join Game</button>\n        </p>\n      </div>\n      <div className=\"half-partition\">\n        <form onSubmit={component.createGameButtonPressed}>\n          <p>\n            <label>Name:<br />\n              <input type=\"text\" value={component.state.createGameName} onChange={component.onCreateGameNameChange}/>\n            </label>\n          </p>\n          <p>\n            <label>Number of players:<br />\n              <input type=\"text\" value={component.state.createGameNumPlayers} onChange={component.onCreateGameNumPlayersChange}/>\n            </label>\n          </p>\n          <input type=\"submit\" value=\"Create Game\" className=\"wide-button\" />\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { GameList } from \"../Models/GameList\";\n\nconst initialGameList: GameList = new GameList();\n\nexport const initialState = {\n  gameList: initialGameList,\n  selectedGame: -1,\n  createGameName: \"\",\n  createGameNumPlayers: 0,\n  errorMessage: \"\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface IGameListViewModel {\n  state: State;\n  createGameButtonPressed(e: any): void;\n  joinGameButtonPressed(e: any): void;\n  tableRowPressed(index: number): void;\n  onCreateGameNameChange(e: any): void;\n  onCreateGameNumPlayersChange(e: any): void;\n  isJoinGameButtonDisabled(): boolean;\n}\n","import * as React from \"react\";\nimport { GameLobbyView } from \"../Views/GameLobbyView\";\nimport { initialState, State, IGameLobbyViewModel } from \"./IGameLobbyViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\n\nexport class GameLobbyViewModel extends React.Component<ViewModelProps, State> implements IGameLobbyViewModel, IObserver {\n\n  state: State = initialState;\n  gameId: string;\n\n  constructor(props: ViewModelProps) {\n    super(props);\n    this.gameId = this.props.services.getCurrentGameId();\n    this.props.services.getGameList();\n    this.state = {\n      playerList: this.props.services.getPlayerList(this.gameId)\n    };\n  }\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"updateGameList\") {\n      this.setState({\"playerList\": this.props.services.getPlayerList(this.gameId)});\n    }\n  }\n\n  startGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    alert(\"starting game...\");\n  }\n\n  render(): JSX.Element {\n    return GameLobbyView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/IGameLobbyViewModel\";\n\nexport const GameLobbyView  = (component: I.IGameLobbyViewModel) => {\n  const players = [];\n  const playerList = component.state.playerList;\n  const num = playerList.length;\n  for (let i = 0; i < playerList.length; i++) {\n    players.push(\n      <li key={i}>{playerList[i].username}</li>\n    );\n  }\n  return (\n    <div className=\"view\">\n      <div className=\"half-partition\">\n        <p><b><u>Players</u></b></p>\n        {num}\n        <ul>\n          {players}\n        </ul>\n        <p><button onClick={component.startGameButtonPressed} disabled={playerList.length < 2}>Start Game</button></p>\n      </div>\n    </div>\n  );\n}\n","import { Player } from \"../Models/Player\";\n\nconst initialPlayerList: Array<Player> = [];\n\nexport const initialState = {\n  playerList: initialPlayerList\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface IGameLobbyViewModel {\n  state: State;\n  startGameButtonPressed(e: any): void;\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { Serializer } from \"./Serializer\";\nimport { ExternalClientFacade } from \"../Services/ExternalClientFacade\";\nimport { GameList } from \"../Models/GameList\";\nimport { Player } from \"../Models/Player\";\nimport { LobbyGame } from \"../Models/LobbyGame\";\n\nexport class ClientCommunicator {\n    serverUrl: string;\n    serverPort: string;\n    serializer: Serializer;\n    clientFacade: ExternalClientFacade;\n\n    constructor(public serverUrlIn: string, public serverPortIn: string, public serialIn: Serializer, public facadeIn: ExternalClientFacade) {\n        this.serverUrl = serverUrlIn;\n        this.serverPort = serverPortIn;\n        this.serializer = serialIn;\n        this.clientFacade = facadeIn;\n    }\n    public sendCommand(command: ClientCommandObjects){\n        var data = this.serializer.toJSON(command);\n        var request = new XMLHttpRequest();\n        request.open('POST', \"/command\", true);\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        let that = this;\n        let serial = this.serializer;\n        request.onload = function() {\n            if (request.status >= 200 && request.status < 400) {\n              // Success!\n              var result = serial.parseJSON(request.responseText);\n              that.executeCommands(result);\n            } else {\n              // We reached our target server, but it returned an error\n          \n            }\n          };\n          \n          request.onerror = function() {\n            // There was a connection error of some sort\n          };\n        request.send(data);\n    }\n\n    public executeCommands(commands: ClientCommandObjects[]){\n      for (var i = 0; i < commands.length; i++){\n        if (commands[i]._methodName == \"loginStatus\"){\n          this.clientFacade.loginResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\n        }\n        else if (commands[i]._methodName == \"registerStatus\"){\n          this.clientFacade.registerResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\n        }\n        else if (commands[i]._methodName == \"updateGameList\"){\n          const games = commands[i]._paramValues[2];\n          const gameList = new GameList();\n          for (let i = 0; i < games.length; i++) {\n            const gameID = games[i].gameID;\n            const name = games[i].gamename;\n            const host = new Player(games[i].host);\n            const maxPlayers = games[i].maxPlayer;\n            const game = new LobbyGame(gameID, host, name, maxPlayers);\n\n            const players = games[i].playerList.playerList;\n            for (let j = 0; j < players.length; j++) {\n              const player = new Player(players[j].username);\n              game.addPlayer(player);\n            }\n            gameList.addGame(game);\n          }\n          this.clientFacade.updateGameList(commands[i]._paramValues[0], gameList, commands[i]._paramValues[1]);\n        }\n        else if (commands[i]._methodName == \"joinGame\"){\n          this.clientFacade.joinGame(commands[i]._paramValues[2]);\n        }\n        else if (commands[i]._methodName == \"startGame\"){\n          this.clientFacade.startGame(commands[i]._paramValues[2]);\n        }\n      }\n    }\n}\n","import { Player } from \"./Player\"\n\nexport class LobbyGame {\n    gameID: string;\n    gamename: string;\n    playerList: Array<Player>;\n    maxPlayer: number;\n    currentPlayerNum: number;\n    host: Player;\n    \n\n    constructor(gameID: string, host: Player, name: string, maxPlayers: number) {\n        this.gameID = gameID;\n        this.host = host;\n        this.gamename = name;\n        this.maxPlayer = maxPlayers;\n        this.playerList = new Array<Player>();\n    }\n\n    getPlayerList(): Array<Player> {\n        return this.playerList;\n    }\n\n    getGameID(): string {\n        return this.gameID;\n    }\n\n    getGameName(): string {\n        return this.gamename;\n    }\n\n    getMaxPlayers(): number {\n        return this.maxPlayer;\n    }\n\n    getNumPlayers(): number {\n        return this.playerList.length;\n    }\n\n    addPlayer(player: Player) {\n        //If this would push it over the max, throw an error\n        if (this.getNumPlayers() == this.maxPlayer) {\n            throw Error(\"You already have the maximum number of Players\");\n        }\n        this.playerList.push(player);\n    }\n\n    removePlayer(username: string) {\n        for (var i = this.playerList.length - 1; i >= 0; --i) {\n            if (this.playerList[i].getUsername() == username) {\n                this.playerList.splice(i, 1);\n            }\n        }\n    }\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { GameList } from \"../Models/GameList\";\n\nexport class Serializer {\n    constructor() {\n    }\n    public toJSON(command: ClientCommandObjects){\n        const myCommand = JSON.stringify([command]);\n        return myCommand;\n    }\n    public parseJSON(command: string){\n        const myCommand: ClientCommandObjects[] = JSON.parse(command);\n        return myCommand;\n    }\n    public parseJSONGames(games: string){\n        const gameList: GameList = JSON.parse(games);\n        return gameList;\n    }\n}\n","import { ClientRoot } from \"../Models/ClientRoot\";\nimport { LobbyGame } from \"../Models/LobbyGame\";\nimport { GameList } from \"../Models/GameList\";\n\nexport class ExternalClientFacade {\n    root: ClientRoot;\n\n    constructor(root: ClientRoot) {\n        this.root = root;\n    }\n    loginResults(wasSuccessful: boolean, errorMessage: string) {\n        this.root.loginResults(wasSuccessful, errorMessage);\n    }\n\n    registerResults(wasSuccessful: boolean, errorMessage: string) {\n        this.root.registerResults(wasSuccessful, errorMessage);\n    }\n\n    updateGameList(wasSuccessful: boolean, games: GameList, errorMessage: string) {\n        this.root.updateGameList(wasSuccessful, games, errorMessage);\n    }\n\n    transitionPage(pageName: string) {\n        this.root.transitionPage(pageName);\n    }\n\n    getGameList(): Array<LobbyGame> {\n        let gameList = this.root.getGameList();\n        return gameList;\n    }\n\n    joinGame(gameId: string) {\n        this.root.joinGame(gameId);\n    }\n\n    startGame(gameId:string){\n    \tthis.root.startGame(gameId);\n    }\n\n}\n","import { GameList } from \"./GameList\"\nimport { Player } from \"./Player\"\nimport { LobbyGame } from \"./LobbyGame\"\nimport { Session } from \"./Session\"\nimport { IObserver } from \"../ViewModels/IObserver\"\nimport { ISubject } from \"./ISubject\"\n\n\nexport class ClientRoot implements ISubject {\n    gameList: GameList;\n    myPlayer: Player;\n    lobby: LobbyGame;\n    session: Session;\n    observers: Array<IObserver>;\n\n    constructor() {\n        this.gameList = new GameList();\n        this.myPlayer = null;\n        this.lobby = null;\n        this.session = new Session();\n        this.observers = new Array<IObserver>();\n    }\n\n    public attach(o: IObserver) {\n        this.observers.push(o); \n    }\n\n    public detach(o: IObserver) {\n\n    }\n\n    notify(updateType: string, data: any) {\n        for (const o of this.observers) {\n            if (o != null) {\n                o.update(updateType, data);\n            }\n        }\n    }\n    transitionPage(pageName: string) {\n        this.session.setCurrentPage(pageName);\n        this.notify(\"transitionPage\", pageName);\n    }\n\n\n    getGameList(): Array<LobbyGame> {\n        let games = this.gameList.getGames();\n        return games;\n    }\n\n    getGameIdForUsername(username: string) {\n        let games = this.gameList.getGames();\n        for (let i = 0; i < games.length; i++) {\n            for (let j = 0; j < games[i].playerList.length; j++) {\n                if (games[i].playerList[j].username == username) {\n                    return games[i].gameID;\n                }\n            }\n        }\n    }\n\n    getPlayerList(gameId: string) {\n        let game = this.gameList.findGameById(gameId);\n        return game.getPlayerList();\n    }\n\n    joinGame(gameId: string) {\n        let game = this.gameList.findGameById(gameId);\n        game.addPlayer(this.myPlayer);\n        this.transitionPage(\"lobbyGame\");\n    }\n \n    getCurrentUser(){\n    \treturn this.myPlayer.getUsername();\n    }\n\n    updateGameList(wasSuccessful: boolean, gameList: GameList, errorMessage: string) {\n        if (wasSuccessful) {\n            this.gameList.replaceGameList(gameList.getGames());\n            this.notify(\"updateGameList\", this.gameList);\n        } else {\n            this.notify(\"error\", errorMessage);\n        }\n    }\n\n    startGame(gameId:string){\n    \tthis.notify(\"startGame\",gameId);\n    }\n\n    loginResults(wasSuccessful: boolean, data: string) {\n        if (wasSuccessful) {\n            this.myPlayer = new Player(data);\n            this.session.setLoggedInUser(this.myPlayer);\n            this.transitionPage(\"gameList\");\n        } else {\n            this.notify(\"error\", data);\n        }\n    }\n\n    registerResults(wasSuccessful: boolean, data: string) {\n        if (wasSuccessful) {\n            this.myPlayer = new Player(data);\n            this.session.setLoggedInUser(this.myPlayer);\n            this.transitionPage(\"gameList\");\n        } else {\n            this.notify(\"error\", data);\n        }\n    }\n\n\n}\n","import {Player} from \"./Player\"\n\nexport class Session {\n   // authToken: string;\n    currentPage: string;\n    loggedInUser: Player;\n    \n    constructor() {\n        //this.authToken = auth;\n       this.currentPage = \"Login\";\n       this.loggedInUser = null;\n    }\n\n   /* get getAuth(): string {\n        return this.authToken;\n    }\n\n    set setAuth(auth: string) {\n        this.authToken = auth;\n    }\n    */\n    get getCurrentPage(): string {\n        return this.currentPage;\n    }\n\n    setCurrentPage(page: string) {\n        this.currentPage = page;\n    }\n\n    get getLoggedInUser(): Player {\n        return this.loggedInUser;\n    }\n\n    setLoggedInUser(player: Player) {\n        this.loggedInUser = player;\n    }\n\n}\n","import { ServerProxy } from \"../Server/ServerProxy\";\nimport { ClientRoot } from \"../Models/ClientRoot\";\n\nexport class InternalClientFacade {\n    proxy: ServerProxy;\n    root: ClientRoot;\n\n    constructor(proxy:ServerProxy,root:ClientRoot) {\n        this.proxy = proxy;\n        this.root = root;\n    }\n\n    login(username: string, password: string) {\n        this.proxy.login(username, password);\n    }\n\n    register(username: string, password: string) {\n        this.proxy.register(username, password, \"YES\");\n    }\n\n    createGame(numPlayers: number, gameName: string) {\n    \t  const me = this.root.getCurrentUser();\n        this.proxy.createGame(me, numPlayers, gameName);\n    }\n\n    getGameList(){\n        this.proxy.getGameList();\n    }\n\n    getPlayerList(gameId: string) {\n        return this.root.getPlayerList(gameId);\n    }\n\n    getCurrentGameId(): string {\n        return this.root.getGameIdForUsername(this.root.getCurrentUser());\n    }\n\n    joinGame(gameName: string, gameId: string) {\n    \t  const me = this.root.getCurrentUser();\n        this.proxy.joinGame(me, gameName, gameId);\n   }\n\n    startGame(gameId:string){\n    \tthis.proxy.startGame(gameId);\n    }\n\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { ClientCommunicator } from \"./ClientCommunicator\";\n//import { Serializer } from \"./serializer\";\n\nexport class ServerProxy {\n    host: string;\n    port: string;\n    communicator: ClientCommunicator;\n    constructor(public commIn: ClientCommunicator) {\n        this.communicator = commIn;\n    }\n    public register(username:string, password:string, confirm:string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"register\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\n        this.communicator.sendCommand(command);\n    }\n    public login(username: string, password: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"login\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\n        this.communicator.sendCommand(command);\n    }\n    public createGame(username: string, numPlayers: number, gameName: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"createGame\", [\"java.lang.String\", \"java.lang.String\", \"java.lang.String\"], [username, gameName, String(numPlayers)]);\n        this.communicator.sendCommand(command);\n    }\n    public joinGame(username: string, gameName: string, gameId: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"joinGame\", [\"java.lang.String\", \"java.lang.String\"], [username, gameId]);\n        this.communicator.sendCommand(command);\n    }\n    public startGame(gameId: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"startGame\", [\"java.lang.String\"], [gameId]);\n        this.communicator.sendCommand(command);\n    }\n    public getGameList(){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"getGameList\", [], []);\n        this.communicator.sendCommand(command);\n    }\n}\n","export class ClientCommandObjects {\n    _className: string;\n    _methodName: string;\n    _paramTypes: any[];\n    _paramValues: any[];\n    constructor(classNameIn: string, methodNameIn: string, paramTypesIn: any[], paramValuesIn: any[]) {\n        this._className = classNameIn;\n        this._methodName = methodNameIn;\n        this._paramTypes = paramTypesIn;\n        this._paramValues = paramValuesIn;\n    }\n}\n"],"sourceRoot":""}