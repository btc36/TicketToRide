{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/Models/GameList.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/ViewModels/LoginRegisterViewModel.ts","webpack:///./src/Views/LoginRegisterView.tsx","webpack:///./src/ViewModels/ILoginRegisterViewModel.ts","webpack:///./src/ViewModels/GameListViewModel.ts","webpack:///./src/Views/GameListView.tsx","webpack:///./src/ViewModels/IGameListViewModel.ts","webpack:///./src/ViewModels/GameLobbyViewModel.ts","webpack:///./src/Views/GameLobbyView.tsx","webpack:///./src/ViewModels/IGameLobbyViewModel.ts","webpack:///./src/Server/ClientCommunicator.ts","webpack:///./src/Server/Serializer.ts","webpack:///./src/Services/ExternalClientFacade.ts","webpack:///./src/Models/ClientRoot.ts","webpack:///./src/Models/Player.ts","webpack:///./src/Models/Session.ts","webpack:///./src/Services/InternalClientFacade.ts","webpack:///./src/Server/ServerProxy.ts","webpack:///./src/Server/ClientCommandObjects.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GameList","this","games","Array","addGame","game","push","removeGame","gameId","length","getGameID","splice","replaceGameList","newGameList","getGames","ReactDOM","LoginRegisterViewModel_1","GameListViewModel_1","GameLobbyViewModel_1","ClientCommunicator_1","Serializer_1","ExternalClientFacade_1","ClientRoot_1","InternalClientFacade_1","ServerProxy_1","initialState","page","MainComponent","_super","_this","apply","arguments","state","loginRegisterViewModel","createElement","LoginRegisterViewModel","ref","instance","props","root","attach","main","services","gameListViewModel","GameListViewModel","gameLobbyViewModel","GameLobbyViewModel","__extends","render","Component","ClientRoot","externalClientFacade","ExternalClientFacade","serializer","Serializer","clientCommunicator","ClientCommunicator","serverProxy","ServerProxy","internalClientFacade","InternalClientFacade","document","getElementById","LoginRegisterView_1","ILoginRegisterViewModel_1","update","updateType","data","setState","errorMessage","onLoginButtonPressed","e","preventDefault","login","loginUserName","loginPassword","onRegisterButtonPressed","register","registerUserName","registerPassword","onLoginUserNameChange","target","onLoginPasswordChange","onRegisterUserNameChange","onRegisterPasswordChange","onRegisterConfirmPasswordChange","registerConfirmPassword","LoginRegisterView","component","className","onSubmit","type","onChange","GameListView_1","IGameListViewModel_1","gameList","createGameButtonPressed","createGame","createGameNumPlayers","createGameName","joinGameButtonPressed","gameName","String","selectedGame","id","joinGame","tableRowPressed","index","onCreateGameNameChange","onCreateGameNumPlayersChange","isJoinGameButtonDisabled","getGameList","GameListView","rows","onClick","getGameName","getMaxPlayers","getNumPlayers","maxPlayer","disabled","initialGameList","GameLobbyView_1","IGameLobbyViewModel_1","startGameButtonPressed","alert","GameLobbyView","players","playerList","serverUrlIn","serverPortIn","serialIn","facadeIn","serverUrl","serverPort","clientFacade","sendCommand","command","toJSON","request","XMLHttpRequest","open","setRequestHeader","that","serial","onload","status","result","parseJSON","responseText","executeCommands","onerror","send","commands","_methodName","loginResults","_paramValues","registerResults","console","log","updateGameList","startGame","JSON","stringify","parse","parseJSONGames","wasSuccessful","transitionPage","pageName","GameList_1","Player_1","Session_1","myPlayer","lobby","session","Session","observers","detach","notify","_i","_a","setCurrentPage","setCurrentGame","getCurrentUser","getUsername","Player","setLoggedInUser","username","currentGame","getCurrentGame","currentPage","loggedInUser","player","proxy","password","numPlayers","me","ClientCommandObjects_1","commIn","communicator","confirm","ClientCommandObjects","classNameIn","methodNameIn","paramTypesIn","paramValuesIn","_className","_paramTypes"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = React;","import { LobbyGame } from \"./LobbyGame\"\n\nexport class GameList {\n    games: Array<LobbyGame>;\n\n    [key: string]: any;\n\n    constructor() {\n        this.games = new Array<LobbyGame>();\n    }\n\n    addGame(game: LobbyGame): void {\n        this.games.push(game);\n    }\n\n    removeGame(gameId: string): void {\n        for (var i = this.games.length - 1; i >= 0; --i) {\n            if (this.games[i].getGameID() == gameId) {\n                this.games.splice(i, 1);\n            }\n        }\n    }\n\n    replaceGameList(newGameList: Array<LobbyGame>): void {\n        this.games = newGameList;\n    }\n\n    getGames(): Array<LobbyGame> {\n        return this.games;\n    }\n\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { LoginRegisterViewModel } from './ViewModels/LoginRegisterViewModel';\nimport { GameListViewModel } from './ViewModels/GameListViewModel';\nimport { GameLobbyViewModel } from './ViewModels/GameLobbyViewModel';\n\nimport { ClientCommunicator } from './Server/ClientCommunicator';\nimport { Serializer } from './Server/Serializer';\nimport { ExternalClientFacade } from './Services/ExternalClientFacade';\nimport { ClientRoot } from './Models/ClientRoot';\nimport { InternalClientFacade } from './Services/InternalClientFacade';\nimport { ServerProxy } from './Server/ServerProxy';\n\nexport const initialState = {\n  \"page\": \"loginRegister\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nclass MainComponent extends React.Component<any, any> {\n\n  state: State = initialState;\n  loginRegisterViewModel: JSX.Element = <LoginRegisterViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n  gameListViewModel: JSX.Element = <GameListViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n  gameLobbyViewModel: JSX.Element = <GameLobbyViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\n\n  render(): JSX.Element {\n    if (this.state.page == \"loginRegister\") {\n      return this.loginRegisterViewModel;\n    } else if (this.state.page == \"gameList\") {\n      return this.gameListViewModel;\n    } else if (this.state.page == \"gameLobby\") {\n      return this.gameLobbyViewModel;\n    }\n  }\n}\n\nconst root = new ClientRoot();\nconst externalClientFacade = new ExternalClientFacade(root);\nconst serializer = new Serializer();\nconst clientCommunicator = new ClientCommunicator(\"localhost\", \"8080\", serializer, externalClientFacade);\nconst serverProxy = new ServerProxy(clientCommunicator);\nconst internalClientFacade = new InternalClientFacade(serverProxy, root);\n\nReactDOM.render(\n    <MainComponent services={internalClientFacade} root={root}/>,\n    document.getElementById(\"example\")\n);\n","module.exports = ReactDOM;","import * as React from \"react\";\nimport { LoginRegisterView } from \"../Views/LoginRegisterView\";\nimport { initialState, State, ILoginRegisterViewModel } from \"./ILoginRegisterViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\n\nexport class LoginRegisterViewModel extends React.Component<ViewModelProps, State> implements ILoginRegisterViewModel, IObserver {\n\n  state: State = initialState;\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"error\") {\n      this.setState({\"errorMessage\": data});\n    }\n  }\n\n  onLoginButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.login(this.state.loginUserName, this.state.loginPassword);\n  }\n\n  onRegisterButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.register(this.state.registerUserName, this.state.registerPassword);\n  }\n\n  onLoginUserNameChange = (e: any) => {\n    this.setState({\"loginUserName\": e.target.value});\n  }\n\n  onLoginPasswordChange = (e: any) => {\n    this.setState({\"loginPassword\": e.target.value});\n  }\n\n  onRegisterUserNameChange = (e: any) => {\n    this.setState({\"registerUserName\": e.target.value});\n  }\n\n  onRegisterPasswordChange = (e: any) => {\n    this.setState({\"registerPassword\": e.target.value});\n  }\n\n  onRegisterConfirmPasswordChange = (e: any) => {\n    this.setState({\"registerConfirmPassword\": e.target.value});\n  }\n\n  render(): JSX.Element {\n    return LoginRegisterView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/ILoginRegisterViewModel\";\n\nexport const LoginRegisterView = (component: I.ILoginRegisterViewModel) => {\n    return (\n      <div className=\"view\">\n        <p>{component.state.errorMessage}</p>\n        <div className=\"half-partition\">\n          <h1>Login</h1>\n          <form onSubmit={component.onLoginButtonPressed}>\n            <p>\n              <label>User Name:<br />\n                <input type=\"text\" name=\"login-username\" value={component.state.loginUserName} onChange={component.onLoginUserNameChange} />\n              </label> \n            </p>\n            <p>\n              <label>Password:<br />\n                <input type=\"text\" name=\"login-password\" value={component.state.loginPassword} onChange={component.onLoginPasswordChange}/>\n              </label>\n            </p>\n            <p><input type=\"submit\" value=\"Log in\" /></p>\n          </form>\n        </div>\n        <div className=\"half-partition\">\n          <h1>Register</h1>\n          <form onSubmit={component.onRegisterButtonPressed}>\n            <p>\n              <label>User Name:<br />\n                <input type=\"text\" name=\"register-username\" value={component.state.registerUserName} onChange={component.onRegisterUserNameChange}/>\n              </label>\n            </p>\n            <p>\n              <label>Password:<br />\n                <input type=\"text\" name=\"register-password\" value={component.state.registerPassword} onChange={component.onRegisterPasswordChange}/>\n              </label>\n            </p>\n            <p>\n              <label>Confirm password:<br />\n                <input type=\"text\" name=\"register-confirm-password\" value={component.state.registerConfirmPassword} onChange={component.onRegisterConfirmPasswordChange}/>\n              </label>\n            </p>\n            <input type=\"submit\" value=\"Register\" />\n          </form>\n        </div>\n      </div>\n    );\n}\n","export const initialState = {\n  loginUserName: \"\",\n  loginPassword: \"\",\n  registerUserName: \"\",\n  registerPassword: \"\",\n  registerConfirmPassword: \"\",\n  errorMessage: \"\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface ILoginRegisterViewModel {\n  state: State;\n  onLoginButtonPressed(e: any): void;\n  onRegisterButtonPressed(e: any): void;\n  onLoginUserNameChange(e: any): void;\n  onLoginPasswordChange(e: any): void;\n  onRegisterUserNameChange(e: any): void;\n  onRegisterPasswordChange(e: any): void;\n  onRegisterConfirmPasswordChange(e: any): void;\n}\n","import * as React from \"react\";\nimport { GameListView } from \"../Views/GameListView\";\nimport { initialState, State, IGameListViewModel } from \"./IGameListViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\n\nexport class GameListViewModel extends React.Component<ViewModelProps, State> implements IGameListViewModel, IObserver {\n\n  state: State;\n\n  constructor(props: ViewModelProps) {\n    super(props);\n    this.state = initialState;\n    this.props.services.getGameList();\n  }\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    } else if (updateType == \"updateGameList\") {\n      this.setState({\"gameList\": data});\n    } else if (updateType == \"error\") {\n      this.setState({\"errorMessage\": data});\n    }\n  }\n\n  createGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    this.props.services.createGame(this.state.createGameNumPlayers, this.state.createGameName);\n  }\n\n  joinGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    const gameName: string = String(this.state.gameList[this.state.selectedGame].name);\n    const gameId: string = String(this.state.gameList[this.state.selectedGame].id);\n    this.props.services.joinGame(gameName, gameId);\n  }\n\n  tableRowPressed = (index: number) => {\n    this.setState({selectedGame: index});\n  }\n\n  onCreateGameNameChange = (e: any) => {\n    this.setState({createGameName: e.target.value});\n  }\n\n  onCreateGameNumPlayersChange = (e: any) => {\n    this.setState({createGameNumPlayers: e.target.value});\n  }\n\n\n  isJoinGameButtonDisabled = () => {\n    return this.state.selectedGame != -1;\n  }\n\n  render(): JSX.Element {\n    return GameListView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/IGameListViewModel\";\n\nexport const GameListView = (component: I.IGameListViewModel) => {\n  const rows = [];\n  const gameList = component.state.gameList.getGames();\n  for (let i = 0; i < gameList.length; i++) {\n    rows.push(\n      <tr onClick={() => component.tableRowPressed(i)} className={component.state.selectedGame == i ? \"active\" : \"\"} key={i}>\n        <td>{gameList[i].getGameID()}</td>\n        <td>{gameList[i].getGameName()}</td>\n        <td>{gameList[i].getMaxPlayers()}</td>\n        <td>{gameList[i].getNumPlayers()}/{gameList[i].maxPlayer}</td>\n      </tr>\n    );\n  }\n  return (\n    <div className=\"view\">\n      <p>{component.state.errorMessage}</p>\n      <div className=\"half-partition\">\n        <table>\n          <tbody>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Players</th>\n              <th>In-Game</th>\n            </tr>\n            {rows}\n          </tbody>\n        </table>\n        <p>\n          <button onClick={component.joinGameButtonPressed} disabled={component.state.selectedGame == -1}>Join Game</button>\n        </p>\n      </div>\n      <div className=\"half-partition\">\n        <form onSubmit={component.createGameButtonPressed}>\n          <p>\n            <label>Name:<br />\n              <input type=\"text\" value={component.state.createGameName} onChange={component.onCreateGameNameChange}/>\n            </label>\n          </p>\n          <p>\n            <label>Number of players:<br />\n              <input type=\"text\" value={component.state.createGameNumPlayers} onChange={component.onCreateGameNumPlayersChange}/>\n            </label>\n          </p>\n          <input type=\"submit\" value=\"Create Game\" className=\"wide-button\" />\n        </form>\n      </div>\n    </div>\n  );\n}\n","import { GameList } from \"../Models/GameList\";\n\nconst initialGameList: GameList = new GameList();\n\nexport const initialState = {\n  gameList: initialGameList,\n  selectedGame: -1,\n  createGameName: \"\",\n  createGameNumPlayers: 0,\n  errorMessage: \"\"\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface IGameListViewModel {\n  state: State;\n  createGameButtonPressed(e: any): void;\n  joinGameButtonPressed(e: any): void;\n  tableRowPressed(index: number): void;\n  onCreateGameNameChange(e: any): void;\n  onCreateGameNumPlayersChange(e: any): void;\n  isJoinGameButtonDisabled(): boolean;\n}\n","import * as React from \"react\";\nimport { GameLobbyView } from \"../Views/GameLobbyView\";\nimport { initialState, State, IGameLobbyViewModel } from \"./IGameLobbyViewModel\";\nimport { IObserver } from \"./IObserver\";\nimport { ViewModelProps } from \"./ViewModelProps\";\n\nexport class GameLobbyViewModel extends React.Component<ViewModelProps, State> implements IGameLobbyViewModel, IObserver {\n\n  state: State = initialState;\n\n  update = (updateType: string, data: any) => {\n    if (updateType == \"transitionPage\") {\n      this.props.main.setState({\"page\": data});      \n    }\n  }\n\n  startGameButtonPressed = (e: any) => {\n    e.preventDefault();\n    alert(\"starting game...\");\n  }\n\n  render(): JSX.Element {\n    return GameLobbyView(this);\n  }\n}\n","import * as React from \"react\";\nimport * as I from \"../ViewModels/IGameLobbyViewModel\";\n\nexport const GameLobbyView  = (component: I.IGameLobbyViewModel) => {\n  const players = [];\n  const playerList = component.state.playerList;\n  for (let i = 0; i < playerList.length; i++) {\n    players.push(\n      <li>{playerList[i]}</li>\n    );\n  }\n  return (\n    <div className=\"view\">\n      <div className=\"half-partition\">\n        <p><b><u>Players</u></b></p>\n        <ul>\n          {players}\n        </ul>\n        <p><button onClick={component.startGameButtonPressed} disabled={playerList.length < 2}>Start Game</button></p>\n      </div>\n    </div>\n  );\n}\n","const initialPlayerList: string[] = [];\n\nexport const initialState = {\n  playerList: initialPlayerList\n};\n\nexport type State = Readonly<typeof initialState>;\n\nexport interface IGameLobbyViewModel {\n  state: State;\n  startGameButtonPressed(e: any): void;\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { Serializer } from \"./Serializer\";\nimport { ExternalClientFacade } from \"../Services/ExternalClientFacade\";\n\nexport class ClientCommunicator {\n    serverUrl: string;\n    serverPort: string;\n    serializer: Serializer;\n    clientFacade: ExternalClientFacade;\n\n    constructor(public serverUrlIn: string, public serverPortIn: string, public serialIn: Serializer, public facadeIn: ExternalClientFacade) {\n        this.serverUrl = serverUrlIn;\n        this.serverPort = serverPortIn;\n        this.serializer = serialIn;\n        this.clientFacade = facadeIn;\n    }\n    public sendCommand(command: ClientCommandObjects){\n        var data = this.serializer.toJSON(command);\n        var request = new XMLHttpRequest();\n        request.open('POST', \"/command\", true);\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        let that = this;\n        let serial = this.serializer;\n        request.onload = function() {\n            if (request.status >= 200 && request.status < 400) {\n              // Success!\n              var result = serial.parseJSON(request.responseText);\n              that.executeCommands(result);\n            } else {\n              // We reached our target server, but it returned an error\n          \n            }\n          };\n          \n          request.onerror = function() {\n            // There was a connection error of some sort\n          };\n        request.send(data);\n    }\n\n    public executeCommands(commands: ClientCommandObjects[]){\n      for (var i = 0; i < commands.length; i++){\n        if (commands[i]._methodName == \"loginStatus\"){\n          this.clientFacade.loginResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\n        }\n        else if (commands[i]._methodName == \"registerStatus\"){\n          this.clientFacade.registerResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\n        }\n        else if (commands[i]._methodName == \"updateGameList\"){\n          console.log(commands[i]._paramValues[2]);\n          this.clientFacade.updateGameList(commands[i]._paramValues[0], commands[i]._paramValues[2], commands[i]._paramValues[1]);\n        }\n        else if (commands[i]._methodName == \"joinGame\"){\n          this.clientFacade.joinGame(commands[i]._paramValues[2]);\n        }\n        else if (commands[i]._methodName == \"startGame\"){\n          this.clientFacade.startGame(commands[i]._paramValues[2]);\n        }\n      }\n    }\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { GameList } from \"../Models/GameList\";\n\nexport class Serializer {\n    constructor() {\n    }\n    public toJSON(command: ClientCommandObjects){\n        const myCommand = JSON.stringify([command]);\n        return myCommand;\n    }\n    public parseJSON(command: string){\n        const myCommand: ClientCommandObjects[] = JSON.parse(command);\n        return myCommand;\n    }\n    public parseJSONGames(games: string){\n        const gameList: GameList = JSON.parse(games);\n        return gameList;\n    }\n}\n","import { ClientRoot } from \"../Models/ClientRoot\";\nimport { LobbyGame } from \"../Models/LobbyGame\";\nimport { GameList } from \"../Models/GameList\";\n\nexport class ExternalClientFacade {\n    root: ClientRoot;\n\n    constructor(root: ClientRoot) {\n        this.root = root;\n    }\n    loginResults(wasSuccessful: boolean, errorMessage: string) {\n        this.root.loginResults(wasSuccessful, errorMessage);\n    }\n\n    registerResults(wasSuccessful: boolean, errorMessage: string) {\n        this.root.registerResults(wasSuccessful, errorMessage);\n    }\n\n    updateGameList(wasSuccessful: boolean, games: GameList, errorMessage: string) {\n        this.root.updateGameList(wasSuccessful, games, errorMessage);\n    }\n\n    transitionPage(pageName: string) {\n        this.root.transitionPage(pageName);\n    }\n\n    getGameList(): Array<LobbyGame> {\n        let gameList = this.root.getGameList();\n        return gameList;\n    }\n\n    joinGame(gameId: string) {\n        this.root.joinGame(gameId);\n    }\n\n    startGame(gameId:string){\n    \tthis.root.startGame(gameId);\n    }\n\n}\n","import { GameList } from \"./GameList\"\nimport { Player } from \"./Player\"\nimport { LobbyGame } from \"./LobbyGame\"\nimport { Session } from \"./Session\"\nimport { IObserver } from \"../ViewModels/IObserver\"\nimport { ISubject } from \"./ISubject\"\n\n\nexport class ClientRoot implements ISubject {\n    gameList: GameList;\n    myPlayer: Player;\n    lobby: LobbyGame;\n    session: Session;\n    observers: Array<IObserver>;\n\n    constructor() {\n        this.gameList = new GameList();\n        this.myPlayer = null;\n        this.lobby = null;\n        this.session = new Session();\n        this.observers = new Array<IObserver>();\n    }\n\n    public attach(o: IObserver) {\n        this.observers.push(o); \n    }\n\n    public detach(o: IObserver) {\n\n    }\n\n    notify(updateType: string, data: any) {\n        for (const o of this.observers) {\n            if (o != null) {\n                o.update(updateType, data);\n            }\n        }\n    }\n    transitionPage(pageName: string) {\n        this.session.setCurrentPage(pageName);\n        this.notify(\"transitionPage\", pageName);\n    }\n\n\n    getGameList(): Array<LobbyGame> {\n        let games = this.gameList.getGames();\n        return games;\n    }\n\n    joinGame(gameId: string) {\n        this.myPlayer.setCurrentGame(gameId)\n        this.transitionPage(\"lobbyGame\");\n    }\n \n    getCurrentUser(){\n    \treturn this.myPlayer.getUsername();\n    }\n\n    updateGameList(wasSuccessful: boolean, gameList: GameList, errorMessage: string) {\n        if (wasSuccessful) {\n            this.gameList.replaceGameList(gameList.getGames());\n            this.notify(\"updateGameList\", this.gameList);\n        } else {\n            this.notify(\"error\", errorMessage);\n        }\n    }\n\n    startGame(gameId:string){\n    \tthis.notify(\"startGame\",gameId);\n    }\n\n    loginResults(wasSuccessful: boolean, data: string) {\n        if (wasSuccessful) {\n            this.myPlayer = new Player(data);\n            this.session.setLoggedInUser(this.myPlayer);\n            this.transitionPage(\"gameList\");\n        } else {\n            this.notify(\"error\", data);\n        }\n    }\n\n    registerResults(wasSuccessful: boolean, data: string) {\n        if (wasSuccessful) {\n            this.myPlayer = new Player(data);\n            this.session.setLoggedInUser(this.myPlayer);\n            this.transitionPage(\"gameList\");\n        } else {\n            this.notify(\"error\", data);\n        }\n    }\n\n\n}\n","export class Player {\n    username: string;\n    currentGame: string;\n    constructor(username: string) {\n        this.username = username;\n    }\n    getUsername(): string {\n        return this.username;\n    }\n\n    setCurrentGame(gameId: string) {\n        this.currentGame = gameId;\n    }\n\n    getCurrentGame(): string {\n        return this.currentGame;\n    }\n}\n","import {Player} from \"./Player\"\n\nexport class Session {\n   // authToken: string;\n    currentPage: string;\n    loggedInUser: Player;\n    \n    constructor() {\n        //this.authToken = auth;\n       this.currentPage = \"Login\";\n       this.loggedInUser = null;\n    }\n\n   /* get getAuth(): string {\n        return this.authToken;\n    }\n\n    set setAuth(auth: string) {\n        this.authToken = auth;\n    }\n    */\n    get getCurrentPage(): string {\n        return this.currentPage;\n    }\n\n    setCurrentPage(page: string) {\n        this.currentPage = page;\n    }\n\n    get getLoggedInUser(): Player {\n        return this.loggedInUser;\n    }\n\n    setLoggedInUser(player: Player) {\n        this.loggedInUser = player;\n    }\n\n}\n","import { ServerProxy } from \"../Server/ServerProxy\";\nimport { ClientRoot } from \"../Models/ClientRoot\";\n\nexport class InternalClientFacade {\n    proxy: ServerProxy;\n    root: ClientRoot;\n\n    constructor(proxy:ServerProxy,root:ClientRoot) {\n        this.proxy = proxy;\n        this.root = root;\n    }\n\n    login(username: string, password: string) {\n        this.proxy.login(username, password);\n    }\n\n    register(username: string, password: string) {\n        this.proxy.register(username, password, \"YES\");\n    }\n\n    createGame(numPlayers: number, gameName: string) {\n    \t  const me = this.root.getCurrentUser();\n        this.proxy.createGame(me, numPlayers, gameName);\n    }\n\n    getGameList(){\n        this.proxy.getGameList();\n    }\n\n    joinGame(gameName: string, gameId: string) {\n    \t  const me = this.root.getCurrentUser();\n        this.proxy.joinGame(me, gameName, gameId);\n   }\n\n    startGame(gameId:string){\n    \tthis.proxy.startGame(gameId);\n    }\n\n}\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\nimport { ClientCommunicator } from \"./ClientCommunicator\";\n//import { Serializer } from \"./serializer\";\n\nexport class ServerProxy {\n    host: string;\n    port: string;\n    communicator: ClientCommunicator;\n    constructor(public commIn: ClientCommunicator) {\n        this.communicator = commIn;\n    }\n    public register(username:string, password:string, confirm:string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"register\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\n        this.communicator.sendCommand(command);\n    }\n    public login(username: string, password: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"login\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\n        this.communicator.sendCommand(command);\n    }\n    public createGame(username: string, numPlayers: number, gameName: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"createGame\", [\"java.lang.String\", \"java.lang.String\", \"java.lang.Integer\"], [username, gameName, numPlayers]);\n        this.communicator.sendCommand(command);\n    }\n    public joinGame(username: string, gameName: string, gameId: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"joinGame\", [\"java.lang.String\", \"java.lang.String\", \"java.lang.String\"], [username, gameName, gameId]);\n        this.communicator.sendCommand(command);\n    }\n    public startGame(gameId: string){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"startGame\", [\"java.lang.String\"], [gameId]);\n        this.communicator.sendCommand(command);\n    }\n    public getGameList(){\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"getGameList\", [], []);\n        this.communicator.sendCommand(command);\n    }\n}\n","export class ClientCommandObjects {\n    _className: string;\n    _methodName: string;\n    _paramTypes: any[];\n    _paramValues: any[];\n    constructor(classNameIn: string, methodNameIn: string, paramTypesIn: any[], paramValuesIn: any[]) {\n        this._className = classNameIn;\n        this._methodName = methodNameIn;\n        this._paramTypes = paramTypesIn;\n        this._paramValues = paramValuesIn;\n    }\n}\n"],"sourceRoot":""}