{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/Models/GameList.ts","webpack:///./src/Models/Player.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/ViewModels/LoginRegisterViewModel.ts","webpack:///./src/Views/LoginRegisterView.tsx","webpack:///./src/ViewModels/ILoginRegisterViewModel.ts","webpack:///./src/ViewModels/GameListViewModel.ts","webpack:///./src/Views/GameListView.tsx","webpack:///./src/ViewModels/IGameListViewModel.ts","webpack:///./src/ViewModels/GameLobbyViewModel.ts","webpack:///./src/Views/GameLobbyView.tsx","webpack:///./src/ViewModels/IGameLobbyViewModel.ts","webpack:///./src/Server/ClientCommunicator.ts","webpack:///./src/Models/LobbyGame.ts","webpack:///./src/Server/Serializer.ts","webpack:///./src/Services/ExternalClientFacade.ts","webpack:///./src/Models/ClientRoot.ts","webpack:///./src/Models/Session.ts","webpack:///./src/Services/InternalClientFacade.ts","webpack:///./src/Server/ServerProxy.ts","webpack:///./src/Server/ClientCommandObjects.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GameList","this","games","Array","addGame","game","push","removeGame","gameId","length","getGameID","splice","findGameById","replaceGameList","newGameList","getGames","Player","username","getUsername","ReactDOM","LoginRegisterViewModel_1","GameListViewModel_1","GameLobbyViewModel_1","ClientCommunicator_1","Serializer_1","ExternalClientFacade_1","ClientRoot_1","InternalClientFacade_1","ServerProxy_1","initialState","page","MainComponent","_super","_this","apply","arguments","state","loginRegisterViewModel","createElement","LoginRegisterViewModel","ref","instance","props","root","attach","main","services","gameListViewModel","GameListViewModel","gameLobbyViewModel","GameLobbyViewModel","__extends","render","Component","ClientRoot","externalClientFacade","ExternalClientFacade","serializer","Serializer","clientCommunicator","ClientCommunicator","serverProxy","ServerProxy","internalClientFacade","InternalClientFacade","document","getElementById","LoginRegisterView_1","ILoginRegisterViewModel_1","update","updateType","data","setState","errorMessage","onLoginButtonPressed","e","preventDefault","login","loginUserName","loginPassword","onRegisterButtonPressed","register","registerUserName","registerPassword","onLoginUserNameChange","target","onLoginPasswordChange","onRegisterUserNameChange","onRegisterPasswordChange","onRegisterConfirmPasswordChange","registerConfirmPassword","LoginRegisterView","component","className","onSubmit","type","onChange","GameListView_1","IGameListViewModel_1","gameList","createGameButtonPressed","createGame","createGameNumPlayers","createGameName","joinGameButtonPressed","console","log","gameName","String","selectedGame","gamename","gameID","joinGame","tableRowPressed","index","onCreateGameNameChange","onCreateGameNumPlayersChange","isJoinGameButtonDisabled","getGameList","GameListView","rows","onClick","getGameName","getMaxPlayers","getNumPlayers","maxPlayer","disabled","initialGameList","GameLobbyView_1","IGameLobbyViewModel_1","playerList","getPlayerList","startGameButtonPressed","alert","getCurrentGameId","GameLobbyView","players","GameList_1","Player_1","LobbyGame_1","serverUrlIn","serverPortIn","serialIn","facadeIn","serverUrl","serverPort","clientFacade","sendCommand","command","toJSON","request","XMLHttpRequest","open","setRequestHeader","that","serial","onload","status","result","parseJSON","responseText","executeCommands","onerror","send","commands","_methodName","loginResults","_paramValues","registerResults","i_1","name_1","host","maxPlayers","LobbyGame","j","player","addPlayer","updateGameList","startGame","Error","removePlayer","JSON","stringify","parse","parseJSONGames","wasSuccessful","transitionPage","pageName","Session_1","myPlayer","lobby","session","Session","observers","detach","notify","_i","_a","setCurrentPage","getGameIdForUsername","getCurrentUser","setLoggedInUser","currentPage","loggedInUser","proxy","password","numPlayers","me","ClientCommandObjects_1","commIn","communicator","confirm","ClientCommandObjects","classNameIn","methodNameIn","paramTypesIn","paramValuesIn","_className","_paramTypes"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = React;","import { LobbyGame } from \"./LobbyGame\"\r\n\r\nexport class GameList {\r\n    games: Array<LobbyGame>;\r\n\r\n    [key: string]: any;\r\n\r\n    constructor() {\r\n        this.games = new Array<LobbyGame>();\r\n    }\r\n\r\n    addGame(game: LobbyGame): void {\r\n        this.games.push(game);\r\n    }\r\n\r\n    removeGame(gameId: string): void {\r\n        for (var i = this.games.length - 1; i >= 0; --i) {\r\n            if (this.games[i].getGameID() == gameId) {\r\n                this.games.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    findGameById(gameId: string): LobbyGame {\r\n        for (let i = 0; i < this.games.length; i++) {\r\n            if (this.games[i].getGameID() == gameId) {\r\n                return this.games[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    replaceGameList(newGameList: Array<LobbyGame>): void {\r\n        this.games = newGameList;\r\n    }\r\n\r\n    getGames(): Array<LobbyGame> {\r\n        return this.games;\r\n    }\r\n\r\n}\r\n","export class Player {\r\n    username: string;\r\n    constructor(username: string) {\r\n        this.username = username;\r\n    }\r\n    getUsername(): string {\r\n        return this.username;\r\n    }\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { LoginRegisterViewModel } from './ViewModels/LoginRegisterViewModel';\r\nimport { GameListViewModel } from './ViewModels/GameListViewModel';\r\nimport { GameLobbyViewModel } from './ViewModels/GameLobbyViewModel';\r\n\r\nimport { ClientCommunicator } from './Server/ClientCommunicator';\r\nimport { Serializer } from './Server/Serializer';\r\nimport { ExternalClientFacade } from './Services/ExternalClientFacade';\r\nimport { ClientRoot } from './Models/ClientRoot';\r\nimport { InternalClientFacade } from './Services/InternalClientFacade';\r\nimport { ServerProxy } from './Server/ServerProxy';\r\n\r\nexport const initialState = {\r\n  \"page\": \"loginRegister\"\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nclass MainComponent extends React.Component<any, any> {\r\n\r\n  state: State = initialState;\r\n  loginRegisterViewModel: JSX.Element = <LoginRegisterViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\r\n  gameListViewModel: JSX.Element = <GameListViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\r\n  gameLobbyViewModel: JSX.Element = <GameLobbyViewModel ref={(instance) => this.props.root.attach(instance)} main={this} services={this.props.services} />;\r\n\r\n  render(): JSX.Element {\r\n    if (this.state.page == \"loginRegister\") {\r\n      return this.loginRegisterViewModel;\r\n    } else if (this.state.page == \"gameList\") {\r\n      return this.gameListViewModel;\r\n    } else if (this.state.page == \"lobbyGame\") {\r\n      return this.gameLobbyViewModel;\r\n    } else {\r\n      return <p>Page {this.state.page} not found.</p>;\r\n    }\r\n  }\r\n}\r\n\r\nconst root = new ClientRoot();\r\nconst externalClientFacade = new ExternalClientFacade(root);\r\nconst serializer = new Serializer();\r\nconst clientCommunicator = new ClientCommunicator(\"localhost\", \"8080\", serializer, externalClientFacade);\r\nconst serverProxy = new ServerProxy(clientCommunicator);\r\nconst internalClientFacade = new InternalClientFacade(serverProxy, root);\r\n\r\nReactDOM.render(\r\n    <MainComponent services={internalClientFacade} root={root}/>,\r\n    document.getElementById(\"example\")\r\n);\r\n","module.exports = ReactDOM;","import * as React from \"react\";\r\nimport { LoginRegisterView } from \"../Views/LoginRegisterView\";\r\nimport { initialState, State, ILoginRegisterViewModel } from \"./ILoginRegisterViewModel\";\r\nimport { IObserver } from \"./IObserver\";\r\nimport { ViewModelProps } from \"./ViewModelProps\";\r\n\r\nexport class LoginRegisterViewModel extends React.Component<ViewModelProps, State> implements ILoginRegisterViewModel, IObserver {\r\n\r\n  state: State = initialState;\r\n\r\n  update = (updateType: string, data: any) => {\r\n    if (updateType == \"transitionPage\") {\r\n      this.props.main.setState({\"page\": data});      \r\n    } else if (updateType == \"error\") {\r\n      this.setState({\"errorMessage\": data});\r\n    }\r\n  }\r\n\r\n  onLoginButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.services.login(this.state.loginUserName, this.state.loginPassword);\r\n  }\r\n\r\n  onRegisterButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.services.register(this.state.registerUserName, this.state.registerPassword);\r\n  }\r\n\r\n  onLoginUserNameChange = (e: any) => {\r\n    this.setState({\"loginUserName\": e.target.value});\r\n  }\r\n\r\n  onLoginPasswordChange = (e: any) => {\r\n    this.setState({\"loginPassword\": e.target.value});\r\n  }\r\n\r\n  onRegisterUserNameChange = (e: any) => {\r\n    this.setState({\"registerUserName\": e.target.value});\r\n  }\r\n\r\n  onRegisterPasswordChange = (e: any) => {\r\n    this.setState({\"registerPassword\": e.target.value});\r\n  }\r\n\r\n  onRegisterConfirmPasswordChange = (e: any) => {\r\n    this.setState({\"registerConfirmPassword\": e.target.value});\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return LoginRegisterView(this);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as I from \"../ViewModels/ILoginRegisterViewModel\";\r\n\r\nexport const LoginRegisterView = (component: I.ILoginRegisterViewModel) => {\r\n    return (\r\n      <div className=\"view\">\r\n        <p>{component.state.errorMessage}</p>\r\n        <div className=\"half-partition\">\r\n          <h1>Login</h1>\r\n          <form onSubmit={component.onLoginButtonPressed}>\r\n            <p>\r\n              <label>User Name:<br />\r\n                <input type=\"text\" name=\"login-username\" value={component.state.loginUserName} onChange={component.onLoginUserNameChange} />\r\n              </label> \r\n            </p>\r\n            <p>\r\n              <label>Password:<br />\r\n                <input type=\"text\" name=\"login-password\" value={component.state.loginPassword} onChange={component.onLoginPasswordChange}/>\r\n              </label>\r\n            </p>\r\n            <p><input type=\"submit\" value=\"Log in\" /></p>\r\n          </form>\r\n        </div>\r\n        <div className=\"half-partition\">\r\n          <h1>Register</h1>\r\n          <form onSubmit={component.onRegisterButtonPressed}>\r\n            <p>\r\n              <label>User Name:<br />\r\n                <input type=\"text\" name=\"register-username\" value={component.state.registerUserName} onChange={component.onRegisterUserNameChange}/>\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <label>Password:<br />\r\n                <input type=\"text\" name=\"register-password\" value={component.state.registerPassword} onChange={component.onRegisterPasswordChange}/>\r\n              </label>\r\n            </p>\r\n            <p>\r\n              <label>Confirm password:<br />\r\n                <input type=\"text\" name=\"register-confirm-password\" value={component.state.registerConfirmPassword} onChange={component.onRegisterConfirmPasswordChange}/>\r\n              </label>\r\n            </p>\r\n            <input type=\"submit\" value=\"Register\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","export const initialState = {\r\n  loginUserName: \"\",\r\n  loginPassword: \"\",\r\n  registerUserName: \"\",\r\n  registerPassword: \"\",\r\n  registerConfirmPassword: \"\",\r\n  errorMessage: \"\"\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nexport interface ILoginRegisterViewModel {\r\n  state: State;\r\n  onLoginButtonPressed(e: any): void;\r\n  onRegisterButtonPressed(e: any): void;\r\n  onLoginUserNameChange(e: any): void;\r\n  onLoginPasswordChange(e: any): void;\r\n  onRegisterUserNameChange(e: any): void;\r\n  onRegisterPasswordChange(e: any): void;\r\n  onRegisterConfirmPasswordChange(e: any): void;\r\n}\r\n","import * as React from \"react\";\r\nimport { GameListView } from \"../Views/GameListView\";\r\nimport { initialState, State, IGameListViewModel } from \"./IGameListViewModel\";\r\nimport { IObserver } from \"./IObserver\";\r\nimport { ViewModelProps } from \"./ViewModelProps\";\r\n\r\nexport class GameListViewModel extends React.Component<ViewModelProps, State> implements IGameListViewModel, IObserver {\r\n\r\n  state: State;\r\n\r\n  constructor(props: ViewModelProps) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.props.services.getGameList();\r\n  }\r\n\r\n  update = (updateType: string, data: any) => {\r\n    if (updateType == \"transitionPage\") {\r\n      this.props.main.setState({\"page\": data});      \r\n    } else if (updateType == \"updateGameList\") {\r\n      this.setState({\"gameList\": data});\r\n    } else if (updateType == \"error\") {\r\n      this.setState({\"errorMessage\": data});\r\n    }\r\n  }\r\n\r\n  createGameButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    this.props.services.createGame(this.state.createGameNumPlayers, this.state.createGameName);\r\n  }\r\n\r\n  joinGameButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    const gameName: string = String(this.state.gameList.games[this.state.selectedGame].gamename);\r\n    const gameId: string = String(this.state.gameList.games[this.state.selectedGame].gameID);\r\n    this.props.services.joinGame(gameName, gameId);\r\n  }\r\n\r\n  tableRowPressed = (index: number) => {\r\n    this.setState({selectedGame: index});\r\n  }\r\n\r\n  onCreateGameNameChange = (e: any) => {\r\n    this.setState({createGameName: e.target.value});\r\n  }\r\n\r\n  onCreateGameNumPlayersChange = (e: any) => {\r\n    this.setState({createGameNumPlayers: e.target.value});\r\n  }\r\n\r\n\r\n  isJoinGameButtonDisabled = () => {\r\n    return this.state.selectedGame != -1;\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return GameListView(this);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as I from \"../ViewModels/IGameListViewModel\";\r\n\r\nexport const GameListView = (component: I.IGameListViewModel) => {\r\n  const rows = [];\r\n  const gameList = component.state.gameList.getGames();\r\n  for (let i = 0; i < gameList.length; i++) {\r\n    rows.push(\r\n      <tr onClick={() => component.tableRowPressed(i)} className={component.state.selectedGame == i ? \"active\" : \"\"} key={i}>\r\n        <td>{gameList[i].getGameID()}</td>\r\n        <td>{gameList[i].getGameName()}</td>\r\n        <td>{gameList[i].getMaxPlayers()}</td>\r\n        <td>{gameList[i].getNumPlayers()}/{gameList[i].maxPlayer}</td>\r\n      </tr>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"view\">\r\n      <p>{component.state.errorMessage}</p>\r\n      <div className=\"half-partition\">\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Name</th>\r\n              <th>Players</th>\r\n              <th>In-Game</th>\r\n            </tr>\r\n            {rows}\r\n          </tbody>\r\n        </table>\r\n        <p>\r\n          <button onClick={component.joinGameButtonPressed} disabled={component.state.selectedGame == -1}>Join Game</button>\r\n        </p>\r\n      </div>\r\n      <div className=\"half-partition\">\r\n        <form onSubmit={component.createGameButtonPressed}>\r\n          <p>\r\n            <label>Name:<br />\r\n              <input type=\"text\" value={component.state.createGameName} onChange={component.onCreateGameNameChange}/>\r\n            </label>\r\n          </p>\r\n          <p>\r\n            <label>Number of players:<br />\r\n              <input type=\"text\" value={component.state.createGameNumPlayers} onChange={component.onCreateGameNumPlayersChange}/>\r\n            </label>\r\n          </p>\r\n          <input type=\"submit\" value=\"Create Game\" className=\"wide-button\" />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { GameList } from \"../Models/GameList\";\r\n\r\nconst initialGameList: GameList = new GameList();\r\n\r\nexport const initialState = {\r\n  gameList: initialGameList,\r\n  selectedGame: -1,\r\n  createGameName: \"\",\r\n  createGameNumPlayers: 0,\r\n  errorMessage: \"\"\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nexport interface IGameListViewModel {\r\n  state: State;\r\n  createGameButtonPressed(e: any): void;\r\n  joinGameButtonPressed(e: any): void;\r\n  tableRowPressed(index: number): void;\r\n  onCreateGameNameChange(e: any): void;\r\n  onCreateGameNumPlayersChange(e: any): void;\r\n  isJoinGameButtonDisabled(): boolean;\r\n}\r\n","import * as React from \"react\";\r\nimport { GameLobbyView } from \"../Views/GameLobbyView\";\r\nimport { initialState, State, IGameLobbyViewModel } from \"./IGameLobbyViewModel\";\r\nimport { IObserver } from \"./IObserver\";\r\nimport { ViewModelProps } from \"./ViewModelProps\";\r\n\r\nexport class GameLobbyViewModel extends React.Component<ViewModelProps, State> implements IGameLobbyViewModel, IObserver {\r\n\r\n  state: State = initialState;\r\n  gameId: string;\r\n\r\n  constructor(props: ViewModelProps) {\r\n    super(props);\r\n    this.gameId = this.props.services.getCurrentGameId();\r\n    this.props.services.getGameList();\r\n    this.state = {\r\n      playerList: this.props.services.getPlayerList(this.gameId)\r\n    };\r\n  }\r\n\r\n  update = (updateType: string, data: any) => {\r\n    if (updateType == \"transitionPage\") {\r\n      this.props.main.setState({\"page\": data});      \r\n    } else if (updateType == \"updateGameList\") {\r\n      this.setState({\"playerList\": this.props.services.getPlayerList(this.gameId)});\r\n    }\r\n  }\r\n\r\n  startGameButtonPressed = (e: any) => {\r\n    e.preventDefault();\r\n    alert(\"starting game...\");\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return GameLobbyView(this);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as I from \"../ViewModels/IGameLobbyViewModel\";\r\n\r\nexport const GameLobbyView  = (component: I.IGameLobbyViewModel) => {\r\n  const players = [];\r\n  const playerList = component.state.playerList;\r\n  for (let i = 0; i < playerList.length; i++) {\r\n    players.push(\r\n      <li key={i}>{playerList[i].username}</li>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"view\">\r\n      <div className=\"half-partition\">\r\n        <p><b><u>Players</u></b></p>\r\n        <ul>\r\n          {players}\r\n        </ul>\r\n        <p><button onClick={component.startGameButtonPressed} disabled={playerList.length < 2}>Start Game</button></p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Player } from \"../Models/Player\";\r\n\r\nconst initialPlayerList: Array<Player> = [];\r\n\r\nexport const initialState = {\r\n  playerList: initialPlayerList\r\n};\r\n\r\nexport type State = Readonly<typeof initialState>;\r\n\r\nexport interface IGameLobbyViewModel {\r\n  state: State;\r\n  startGameButtonPressed(e: any): void;\r\n}\r\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\r\nimport { Serializer } from \"./Serializer\";\r\nimport { ExternalClientFacade } from \"../Services/ExternalClientFacade\";\r\nimport { GameList } from \"../Models/GameList\";\r\nimport { Player } from \"../Models/Player\";\r\nimport { LobbyGame } from \"../Models/LobbyGame\";\r\n\r\nexport class ClientCommunicator {\r\n    serverUrl: string;\r\n    serverPort: string;\r\n    serializer: Serializer;\r\n    clientFacade: ExternalClientFacade;\r\n\r\n    constructor(public serverUrlIn: string, public serverPortIn: string, public serialIn: Serializer, public facadeIn: ExternalClientFacade) {\r\n        this.serverUrl = serverUrlIn;\r\n        this.serverPort = serverPortIn;\r\n        this.serializer = serialIn;\r\n        this.clientFacade = facadeIn;\r\n    }\r\n    public sendCommand(command: ClientCommandObjects){\r\n        var data = this.serializer.toJSON(command);\r\n        var request = new XMLHttpRequest();\r\n        request.open('POST', \"/command\", true);\r\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\r\n        let that = this;\r\n        let serial = this.serializer;\r\n        request.onload = function() {\r\n            if (request.status >= 200 && request.status < 400) {\r\n              // Success!\r\n              var result = serial.parseJSON(request.responseText);\r\n              that.executeCommands(result);\r\n            } else {\r\n              // We reached our target server, but it returned an error\r\n          \r\n            }\r\n          };\r\n          \r\n          request.onerror = function() {\r\n            // There was a connection error of some sort\r\n          };\r\n        request.send(data);\r\n    }\r\n\r\n    public executeCommands(commands: ClientCommandObjects[]){\r\n      for (var i = 0; i < commands.length; i++){\r\n        if (commands[i]._methodName == \"loginStatus\"){\r\n          this.clientFacade.loginResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\r\n        }\r\n        else if (commands[i]._methodName == \"registerStatus\"){\r\n          this.clientFacade.registerResults(commands[i]._paramValues[0], commands[i]._paramValues[1]);\r\n        }\r\n        else if (commands[i]._methodName == \"updateGameList\"){\r\n          const games = commands[i]._paramValues[2];\r\n          const gameList = new GameList();\r\n          for (let i = 0; i < games.length; i++) {\r\n            const gameID = games[i].gameID;\r\n            const name = games[i].gamename;\r\n            const host = new Player(games[i].host);\r\n            const maxPlayers = games[i].maxPlayer;\r\n            const game = new LobbyGame(gameID, host, name, maxPlayers);\r\n\r\n            const players = games[i].playerList.playerList;\r\n            for (let j = 0; j < players.length; j++) {\r\n              const player = new Player(players[j].username);\r\n              game.addPlayer(player);\r\n            }\r\n            gameList.addGame(game);\r\n          }\r\n          this.clientFacade.updateGameList(commands[i]._paramValues[0], gameList, commands[i]._paramValues[1]);\r\n        }\r\n        else if (commands[i]._methodName == \"joinGame\"){\r\n          this.clientFacade.joinGame(commands[i]._paramValues[2]);\r\n        }\r\n        else if (commands[i]._methodName == \"startGame\"){\r\n          this.clientFacade.startGame(commands[i]._paramValues[2]);\r\n        }\r\n      }\r\n    }\r\n}\r\n","import { Player } from \"./Player\"\r\n\r\nexport class LobbyGame {\r\n    gameID: string;\r\n    gamename: string;\r\n    playerList: Array<Player>;\r\n    maxPlayer: number;\r\n    currentPlayerNum: number;\r\n    host: Player;\r\n    \r\n\r\n    constructor(gameID: string, host: Player, name: string, maxPlayers: number) {\r\n        this.gameID = gameID;\r\n        this.host = host;\r\n        this.gamename = name;\r\n        this.maxPlayer = maxPlayers;\r\n        this.playerList = new Array<Player>();\r\n    }\r\n\r\n    getPlayerList(): Array<Player> {\r\n        return this.playerList;\r\n    }\r\n\r\n    getGameID(): string {\r\n        return this.gameID;\r\n    }\r\n\r\n    getGameName(): string {\r\n        return this.gamename;\r\n    }\r\n\r\n    getMaxPlayers(): number {\r\n        return this.maxPlayer;\r\n    }\r\n\r\n    getNumPlayers(): number {\r\n        return this.playerList.length;\r\n    }\r\n\r\n    addPlayer(player: Player) {\r\n        //If this would push it over the max, throw an error\r\n        if (this.getNumPlayers() == this.maxPlayer) {\r\n            throw Error(\"You already have the maximum number of Players\");\r\n        }\r\n        this.playerList.push(player);\r\n    }\r\n\r\n    removePlayer(username: string) {\r\n        for (var i = this.playerList.length - 1; i >= 0; --i) {\r\n            if (this.playerList[i].getUsername() == username) {\r\n                this.playerList.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\r\nimport { GameList } from \"../Models/GameList\";\r\n\r\nexport class Serializer {\r\n    constructor() {\r\n    }\r\n    public toJSON(command: ClientCommandObjects){\r\n        const myCommand = JSON.stringify([command]);\r\n        return myCommand;\r\n    }\r\n    public parseJSON(command: string){\r\n        const myCommand: ClientCommandObjects[] = JSON.parse(command);\r\n        return myCommand;\r\n    }\r\n    public parseJSONGames(games: string){\r\n        const gameList: GameList = JSON.parse(games);\r\n        return gameList;\r\n    }\r\n}\r\n","import { ClientRoot } from \"../Models/ClientRoot\";\r\nimport { LobbyGame } from \"../Models/LobbyGame\";\r\nimport { GameList } from \"../Models/GameList\";\r\n\r\nexport class ExternalClientFacade {\r\n    root: ClientRoot;\r\n\r\n    constructor(root: ClientRoot) {\r\n        this.root = root;\r\n    }\r\n    loginResults(wasSuccessful: boolean, errorMessage: string) {\r\n        this.root.loginResults(wasSuccessful, errorMessage);\r\n    }\r\n\r\n    registerResults(wasSuccessful: boolean, errorMessage: string) {\r\n        this.root.registerResults(wasSuccessful, errorMessage);\r\n    }\r\n\r\n    updateGameList(wasSuccessful: boolean, games: GameList, errorMessage: string) {\r\n        this.root.updateGameList(wasSuccessful, games, errorMessage);\r\n    }\r\n\r\n    transitionPage(pageName: string) {\r\n        this.root.transitionPage(pageName);\r\n    }\r\n\r\n    getGameList(): Array<LobbyGame> {\r\n        let gameList = this.root.getGameList();\r\n        return gameList;\r\n    }\r\n\r\n    joinGame(gameId: string) {\r\n        this.root.joinGame(gameId);\r\n    }\r\n\r\n    startGame(gameId:string){\r\n    \tthis.root.startGame(gameId);\r\n    }\r\n\r\n}\r\n","import { GameList } from \"./GameList\"\r\nimport { Player } from \"./Player\"\r\nimport { LobbyGame } from \"./LobbyGame\"\r\nimport { Session } from \"./Session\"\r\nimport { IObserver } from \"../ViewModels/IObserver\"\r\nimport { ISubject } from \"./ISubject\"\r\n\r\n\r\nexport class ClientRoot implements ISubject {\r\n    gameList: GameList;\r\n    myPlayer: Player;\r\n    lobby: LobbyGame;\r\n    session: Session;\r\n    observers: Array<IObserver>;\r\n\r\n    constructor() {\r\n        this.gameList = new GameList();\r\n        this.myPlayer = null;\r\n        this.lobby = null;\r\n        this.session = new Session();\r\n        this.observers = new Array<IObserver>();\r\n    }\r\n\r\n    public attach(o: IObserver) {\r\n        this.observers.push(o); \r\n    }\r\n\r\n    public detach(o: IObserver) {\r\n\r\n    }\r\n\r\n    notify(updateType: string, data: any) {\r\n        for (const o of this.observers) {\r\n            if (o != null) {\r\n                o.update(updateType, data);\r\n            }\r\n        }\r\n    }\r\n    transitionPage(pageName: string) {\r\n        this.session.setCurrentPage(pageName);\r\n        this.notify(\"transitionPage\", pageName);\r\n    }\r\n\r\n\r\n    getGameList(): Array<LobbyGame> {\r\n        let games = this.gameList.getGames();\r\n        return games;\r\n    }\r\n\r\n    getGameIdForUsername(username: string) {\r\n        let games = this.gameList.getGames();\r\n        for (let i = 0; i < games.length; i++) {\r\n            for (let j = 0; j < games[i].playerList.length; j++) {\r\n                if (games[i].playerList[j].username == username) {\r\n                    return games[i].gameID;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getPlayerList(gameId: string) {\r\n        let game = this.gameList.findGameById(gameId);\r\n        return game.getPlayerList();\r\n    }\r\n\r\n    joinGame(gameId: string) {\r\n        let game = this.gameList.findGameById(gameId);\r\n        game.addPlayer(this.myPlayer);\r\n        this.transitionPage(\"lobbyGame\");\r\n    }\r\n \r\n    getCurrentUser(){\r\n    \treturn this.myPlayer.getUsername();\r\n    }\r\n\r\n    updateGameList(wasSuccessful: boolean, gameList: GameList, errorMessage: string) {\r\n        if (wasSuccessful) {\r\n            this.gameList.replaceGameList(gameList.getGames());\r\n            this.notify(\"updateGameList\", this.gameList);\r\n        } else {\r\n            this.notify(\"error\", errorMessage);\r\n        }\r\n    }\r\n\r\n    startGame(gameId:string){\r\n    \tthis.notify(\"startGame\",gameId);\r\n    }\r\n\r\n    loginResults(wasSuccessful: boolean, data: string) {\r\n        if (wasSuccessful) {\r\n            this.myPlayer = new Player(data);\r\n            this.session.setLoggedInUser(this.myPlayer);\r\n            this.transitionPage(\"gameList\");\r\n        } else {\r\n            this.notify(\"error\", data);\r\n        }\r\n    }\r\n\r\n    registerResults(wasSuccessful: boolean, data: string) {\r\n        if (wasSuccessful) {\r\n            this.myPlayer = new Player(data);\r\n            this.session.setLoggedInUser(this.myPlayer);\r\n            this.transitionPage(\"gameList\");\r\n        } else {\r\n            this.notify(\"error\", data);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import {Player} from \"./Player\"\r\n\r\nexport class Session {\r\n   // authToken: string;\r\n    currentPage: string;\r\n    loggedInUser: Player;\r\n    \r\n    constructor() {\r\n        //this.authToken = auth;\r\n       this.currentPage = \"Login\";\r\n       this.loggedInUser = null;\r\n    }\r\n\r\n   /* get getAuth(): string {\r\n        return this.authToken;\r\n    }\r\n\r\n    set setAuth(auth: string) {\r\n        this.authToken = auth;\r\n    }\r\n    */\r\n    get getCurrentPage(): string {\r\n        return this.currentPage;\r\n    }\r\n\r\n    setCurrentPage(page: string) {\r\n        this.currentPage = page;\r\n    }\r\n\r\n    get getLoggedInUser(): Player {\r\n        return this.loggedInUser;\r\n    }\r\n\r\n    setLoggedInUser(player: Player) {\r\n        this.loggedInUser = player;\r\n    }\r\n\r\n}\r\n","import { ServerProxy } from \"../Server/ServerProxy\";\r\nimport { ClientRoot } from \"../Models/ClientRoot\";\r\n\r\nexport class InternalClientFacade {\r\n    proxy: ServerProxy;\r\n    root: ClientRoot;\r\n\r\n    constructor(proxy:ServerProxy,root:ClientRoot) {\r\n        this.proxy = proxy;\r\n        this.root = root;\r\n    }\r\n\r\n    login(username: string, password: string) {\r\n        this.proxy.login(username, password);\r\n    }\r\n\r\n    register(username: string, password: string) {\r\n        this.proxy.register(username, password, \"YES\");\r\n    }\r\n\r\n    createGame(numPlayers: number, gameName: string) {\r\n    \t  const me = this.root.getCurrentUser();\r\n        this.proxy.createGame(me, numPlayers, gameName);\r\n    }\r\n\r\n    getGameList(){\r\n        this.proxy.getGameList();\r\n    }\r\n\r\n    getPlayerList(gameId: string) {\r\n        return this.root.getPlayerList(gameId);\r\n    }\r\n\r\n    getCurrentGameId(): string {\r\n        return this.root.getGameIdForUsername(this.root.getCurrentUser());\r\n    }\r\n\r\n    joinGame(gameName: string, gameId: string) {\r\n    \t  const me = this.root.getCurrentUser();\r\n        this.proxy.joinGame(me, gameName, gameId);\r\n   }\r\n\r\n    startGame(gameId:string){\r\n    \tthis.proxy.startGame(gameId);\r\n    }\r\n\r\n}\r\n","import { ClientCommandObjects } from \"./ClientCommandObjects\";\r\nimport { ClientCommunicator } from \"./ClientCommunicator\";\r\n//import { Serializer } from \"./serializer\";\r\n\r\nexport class ServerProxy {\r\n    host: string;\r\n    port: string;\r\n    communicator: ClientCommunicator;\r\n    constructor(public commIn: ClientCommunicator) {\r\n        this.communicator = commIn;\r\n    }\r\n    public register(username:string, password:string, confirm:string){\r\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"register\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public login(username: string, password: string){\r\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"login\", [\"java.lang.String\", \"java.lang.String\"], [username, password]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public createGame(username: string, numPlayers: number, gameName: string){\r\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"createGame\", [\"java.lang.String\", \"java.lang.String\", \"java.lang.String\"], [username, gameName, String(numPlayers)]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public joinGame(username: string, gameName: string, gameId: string){\r\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"joinGame\", [\"java.lang.String\", \"java.lang.String\"], [username, gameId]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public startGame(gameId: string){\r\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"startGame\", [\"java.lang.String\"], [gameId]);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n    public getGameList(){\r\n        const command = new ClientCommandObjects(\"server.ServerFacade\", \"getGameList\", [], []);\r\n        this.communicator.sendCommand(command);\r\n    }\r\n}\r\n","export class ClientCommandObjects {\r\n    _className: string;\r\n    _methodName: string;\r\n    _paramTypes: any[];\r\n    _paramValues: any[];\r\n    constructor(classNameIn: string, methodNameIn: string, paramTypesIn: any[], paramValuesIn: any[]) {\r\n        this._className = classNameIn;\r\n        this._methodName = methodNameIn;\r\n        this._paramTypes = paramTypesIn;\r\n        this._paramValues = paramValuesIn;\r\n    }\r\n}\r\n"],"sourceRoot":""}